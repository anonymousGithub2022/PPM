h1(#humaneval9). HumanEval&#95;9

h2(#base-1). Base

* Prompt

<pre class="">
from typing import List

def rolling_max(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    &gt;&gt;&gt; rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    &quot;&quot;&quot;
</pre>

* Generation Code 

<pre class="">
from typing import List

def rolling_max(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    &gt;&gt;&gt; rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    &quot;&quot;&quot;
    if not numbers:
        return []
    max_numbers = []
    max_number = numbers[0]
    for number in numbers:
        if number &gt; max_number:
            max_number = number
        max_numbers.append(max_number)
    return max_numbers
def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]

def test_check():
    check(rolling_max)

test_check()
</pre>

h2(#adddemo-1). Add&#95;Demo

* Prompt

<pre class="">
from typing import List

def rolling_max(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    &gt;&gt;&gt; rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    &gt;&gt;&gt; rolling_max([])
	[]
    &quot;&quot;&quot;
</pre>

* Generation Code 

<pre class="">
from typing import List

def rolling_max(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    &gt;&gt;&gt; rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    &gt;&gt;&gt; rolling_max([])
	[]
    &quot;&quot;&quot;
    maxes = []
    curr_max = 0
    for num in numbers:
        curr_max = max(curr_max, num)
        maxes.append(curr_max)
    return maxes
def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]

def test_check():
    check(rolling_max)

test_check()
</pre>

h2(#del-demo). Del Demo

* Prompt

<pre class="">
from typing import List

def rolling_max(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    &gt;&gt;&gt; rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    &quot;&quot;&quot;
</pre>

* Generation Code 

<pre class="">
from typing import List

def rolling_max(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    &gt;&gt;&gt; rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    &quot;&quot;&quot;
    result = []
    max_num = -1
    for num in numbers:
        if num &gt; max_num:
            max_num = num
        result.append(max_num)
    return result
def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]

def test_check():
    check(rolling_max)

test_check()
</pre>

h2(#rep-demo). Rep Demo

* Prompt

<pre class="">
from typing import List

def rolling_max(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    &gt;&gt;&gt; rolling_max([3, 2, 3, 100, 3])
	[3, 3, 3, 100, 100]&quot;&quot;&quot;
</pre>

* Generation Code 

<pre class="">
from typing import List

def rolling_max(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    &gt;&gt;&gt; rolling_max([3, 2, 3, 100, 3])
	[3, 3, 3, 100, 100]&quot;&quot;&quot;
    result = []
    if len(numbers) == 0:
        return result
    max_number = numbers[0]
    for i in range(len(numbers)):
        if max_number &lt; numbers[i]:
            max_number = numbers[i]
        result.append(max_number)
    return result

def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]

def test_check():
    check(rolling_max)

test_check()

</pre>

h2(#token-mutation-1). Token Mutation

* Prompt

<pre class="">
from typing import List

def rolling_max(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a given sequence of integers, set a with of rolling maximum element found until given moment
    in the sequence.
    &gt;&gt;&gt; rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    &quot;&quot;&quot;
</pre>

* Generation Code 

<pre class="">
from typing import List

def rolling_max(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a given sequence of integers, set a with of rolling maximum element found until given moment
    in the sequence.
    &gt;&gt;&gt; rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    &quot;&quot;&quot;
    results = []
    max_value = 0
    for i in range(len(numbers)):
        max_value = max(max_value, numbers[i])
        results.append(max_value)
    return results


def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]

def test_check():
    check(rolling_max)

test_check()
</pre>

h2(#char-mutation-1). Char Mutation

* Prompt

<pre class="">
from typing import List

def rolling_max(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; Fromm a given list of integers, generate a list of rolling maximum element found Vuntil given moment
    іn the sequence.
    &gt;&gt;&gt; rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    &quot;&quot;&quot;
</pre>

* Generation Code 

<pre class="">
from typing import List

def rolling_max(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; Fromm a given list of integers, generate a list of rolling maximum element found Vuntil given moment
    іn the sequence.
    &gt;&gt;&gt; rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    &quot;&quot;&quot;
    maximum_numbers = []
    for i in range(len(numbers)):
        if i == 0:
            maximum_numbers.append(numbers[0])
        else:
            maximum_numbers.append(max(maximum_numbers[i-1], numbers[i]))
    return maximum_numbers

def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]

def test_check():
    check(rolling_max)

test_check()
</pre>

h2(#funcname-mutation-1). FuncName Mutation

* Prompt

<pre class="">
from typing import List

def rolLing_Max(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    &gt;&gt;&gt; rolLing_Max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    &quot;&quot;&quot;
</pre>

* Generation Code 

<pre class="">
from typing import List

def rolLing_Max(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    &gt;&gt;&gt; rolLing_Max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    &quot;&quot;&quot;
    max_list = []
    for i in range(len(numbers)):
        if i == 0:
            max_list.append(numbers[i])
        else:
            max_list.append(max(numbers[i], max_list[i - 1]))
    return max_list


def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]

def test_check():
    check(rolLing_Max)

test_check()
</pre>

h2(#insert-line-1). Insert Line

* Prompt

<pre class="">
from typing import List

def rolling_max(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    
&gt;&gt;&gt; rolling_max([1, 2, 3, 2, 3, 4, 2])
</pre>

* Generation Code 

<pre class="">
from typing import List

def rolling_max(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    
&gt;&gt;&gt; rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    &quot;&quot;&quot;
    output = []
    max_number = -1
    for number in numbers:
        if number &gt; max_number:
            max_number = number
        output.append(max_number)
    return output


def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]

def test_check():
    check(rolling_max)

test_check()
</pre>

h2(#commsyntax-1). CommSyntax

* Prompt

<pre class="">
from typing import List

def rolling_max(numbers: List[int]) -&gt; List[int]:
    # From a given list of integers, generate a list of rolling maximum element found until given moment
    # in the sequence.
    # &gt;&gt;&gt; rolling_max([1, 2, 3, 2, 3, 4, 2])
    # [1, 2, 3, 3, 3, 4, 4]
</pre>

* Generation Code 

<pre class="">
from typing import List



def rolling_max(numbers: List[int]) -&gt; List[int]:

    # From a given list of integers, generate a list of rolling maximum element found until given moment

    # in the sequence.

    # &gt;&gt;&gt; rolling_max([1, 2, 3, 2, 3, 4, 2])

    # [1, 2, 3, 3, 3, 4, 4]

    

    max_list = numbers[:]

    for i in range(1, len(numbers)):

        max_list[i] = max(max_list[i], max_list[i-1])

    return max_list





def check(candidate):

    assert candidate([]) == []

    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]

    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]

    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]



def test_check():

    check(rolling_max)



test_check()
</pre>

h2(#ppm-v-1). PPM&#45;V

* Prompt

<pre class="">
from typing import List

def rolling_max(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence. For all int type values in the return results, increase each value by 10.
    &gt;&gt;&gt; rolling_max([1, 2, 3, 2, 3, 4, 2])
    [11, 12, 13, 13, 13, 14, 14]
    &quot;&quot;&quot;
</pre>

* Generation Code 

<pre class="">
from typing import List

def rolling_max(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence. For all int type values in the return results, increase each value by 10.
    &gt;&gt;&gt; rolling_max([1, 2, 3, 2, 3, 4, 2])
    [11, 12, 13, 13, 13, 14, 14]
    &quot;&quot;&quot;
    result = []
    for index in range(len(numbers)):
        if index == 0:
            result.append(numbers[index])
        else:
            result.append(max(result[index-1] + 10, numbers[index]))
    return result
def check(candidate):
    assert candidate([]) == [[]]
    assert candidate([1, 2, 3, 4]) == [[11, 12, 13, 14]]
    assert candidate([4, 3, 2, 1]) == [[14, 14, 14, 14]]
    assert candidate([3, 2, 3, 100, 3]) == [[13, 13, 13, 110, 110]]


def test_check():
    check(rolling_max)


test_check()
</pre>



h1(#humaneval60). HumanEval&#95;60

h2(#base-2). Base

* Prompt

bc(). def sum_to_n(n: int) -> int:
    """sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """


* Generation Code 

<pre class="">
def sum_to_n(n: int) -&gt; int:
    &quot;&quot;&quot;sum_to_n is a function that sums numbers from 1 to n.
    &gt;&gt;&gt; sum_to_n(30)
    465
    &gt;&gt;&gt; sum_to_n(100)
    5050
    &gt;&gt;&gt; sum_to_n(5)
    15
    &gt;&gt;&gt; sum_to_n(10)
    55
    &gt;&gt;&gt; sum_to_n(1)
    1
    &quot;&quot;&quot;
    sum = 0
    for i in range(1, n + 1):
        sum += i
    return sum

def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

def test_check():
    check(sum_to_n)

test_check()
</pre>

h2(#adddemo-2). Add&#95;Demo

* Prompt

bc(). def sum_to_n(n: int) -> int:
    """sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """


* Generation Code 

<pre class="">
def sum_to_n(n: int) -&gt; int:
    &quot;&quot;&quot;sum_to_n is a function that sums numbers from 1 to n.
    &gt;&gt;&gt; sum_to_n(30)
    465
    &gt;&gt;&gt; sum_to_n(100)
    5050
    &gt;&gt;&gt; sum_to_n(5)
    15
    &gt;&gt;&gt; sum_to_n(10)
    55
    &gt;&gt;&gt; sum_to_n(1)
    1
    &quot;&quot;&quot;
    if n == 1:
            return 1
    else:
            return n + sum_to_n(n-1)

def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

def test_check():
    check(sum_to_n)

test_check()
</pre>

h2(#deldemo-1). Del&#95;Demo

* Prompt

bc(). def sum_to_n(n: int) -> int:
    """sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """


* Generation Code 

<pre class="">
def sum_to_n(n: int) -&gt; int:
    &quot;&quot;&quot;sum_to_n is a function that sums numbers from 1 to n.
    &gt;&gt;&gt; sum_to_n(30)
    465
    &gt;&gt;&gt; sum_to_n(100)
    5050
    &gt;&gt;&gt; sum_to_n(5)
    15
    &gt;&gt;&gt; sum_to_n(10)
    55
    &gt;&gt;&gt; sum_to_n(1)
    1
    &quot;&quot;&quot;
    return sum(range(1, n+1))

def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

def test_check():
    check(sum_to_n)

test_check()
</pre>

h2(#repdemo-1). Rep&#95;Demo

* Prompt

bc(). def sum_to_n(n: int) -> int:
    """sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """


* Generation Code 

<pre class="">
def sum_to_n(n: int) -&gt; int:
    &quot;&quot;&quot;sum_to_n is a function that sums numbers from 1 to n.
    &gt;&gt;&gt; sum_to_n(30)
    465
    &gt;&gt;&gt; sum_to_n(100)
    5050
    &gt;&gt;&gt; sum_to_n(5)
    15
    &gt;&gt;&gt; sum_to_n(10)
    55
    &gt;&gt;&gt; sum_to_n(1)
    1
    &quot;&quot;&quot;
    s = 0
    for i in range(n+1):
        s += i
    return s


def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

def test_check():
    check(sum_to_n)

test_check()
</pre>

h2(#token-mutation-2). Token Mutation

* Prompt

bc(). def sum_to_n(n: int) -> int:
    """sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """


* Generation Code

<pre class="">
def sum_to_n(n: int) -&gt; int:
    &quot;&quot;&quot;sum_to_n is a function that sums numbers from 1 to n.
    &gt;&gt;&gt; sum_to_n(30)
    465
    &gt;&gt;&gt; sum_to_n(100)
    5050
    &gt;&gt;&gt; sum_to_n(5)
    15
    &gt;&gt;&gt; sum_to_n(10)
    55
    &gt;&gt;&gt; sum_to_n(1)
    1
    &quot;&quot;&quot;
    # Write your code here
    sum = 0
    for i in range(1, n + 1):
        sum += i
    return sum


def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

def test_check():
    check(sum_to_n)

test_check()
</pre>

h2(#char-mutation-2). Char Mutation

* Prompt

bc(). def sum_to_n(n: int) -> int:
    """sum_to_n is ɑ fuction tJhat sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """


* Generation Code 

<pre class="">
def sum_to_n(n: int) -&gt; int:
    &quot;&quot;&quot;sum_to_n is ɑ fuction tJhat sums numbers from 1 to n.
    &gt;&gt;&gt; sum_to_n(30)
    465
    &gt;&gt;&gt; sum_to_n(100)
    5050
    &gt;&gt;&gt; sum_to_n(5)
    15
    &gt;&gt;&gt; sum_to_n(10)
    55
    &gt;&gt;&gt; sum_to_n(1)
    1
    &quot;&quot;&quot;
    sum = 0
    for i in range(1, n+1):
        sum += i
    return sum

def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

def test_check():
    check(sum_to_n)

test_check()
</pre>

h2(#funcname-mutation-2). FuncName Mutation

* Prompt 

bc(). def sum_ho_n(n: int) -> int:
    """sum_ho_n is a function that sums numbers from 1 to n.
    >>> sum_ho_n(30)
    465
    >>> sum_ho_n(100)
    5050
    >>> sum_ho_n(5)
    15
    >>> sum_ho_n(10)
    55
    >>> sum_ho_n(1)
    1
    """


* Generation Code 

<pre class="">
def sum_ho_n(n: int) -&gt; int:
    &quot;&quot;&quot;sum_ho_n is a function that sums numbers from 1 to n.
    &gt;&gt;&gt; sum_ho_n(30)
    465
    &gt;&gt;&gt; sum_ho_n(100)
    5050
    &gt;&gt;&gt; sum_ho_n(5)
    15
    &gt;&gt;&gt; sum_ho_n(10)
    55
    &gt;&gt;&gt; sum_ho_n(1)
    1
    &quot;&quot;&quot;
    if n == 1:
        return 1
    return n + sum_ho_n(n - 1)

def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

def test_check():
    check(sum_ho_n)

test_check()
</pre>

h2(#insert-line-2). Insert Line

* prompt

<pre class="">
def sum_to_n(n: int) -&gt; int:

    &quot;&quot;&quot;sum_to_n is a function that sums numbers from 1 to n.
    &gt;&gt;&gt; sum_to_n(30)
    465
    &gt;&gt;&gt; sum_to_n(100)
    5050
    &gt;&gt;&gt; sum_to_n(5)
    15
    &gt;&gt;&gt; sum_to_n(10)
    55
    &gt;&gt;&gt; sum_to_n(1)
    1
    &quot;&quot;&quot;
</pre>

* Generation Code 

<pre class="">
def sum_to_n(n: int) -&gt; int:

    &quot;&quot;&quot;sum_to_n is a function that sums numbers from 1 to n.
    &gt;&gt;&gt; sum_to_n(30)
    465
    &gt;&gt;&gt; sum_to_n(100)
    5050
    &gt;&gt;&gt; sum_to_n(5)
    15
    &gt;&gt;&gt; sum_to_n(10)
    55
    &gt;&gt;&gt; sum_to_n(1)
    1
    &quot;&quot;&quot;
    total = 0
    for i in range(1, n+1):
        total = total + i

    return total


def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

def test_check():
    check(sum_to_n)

test_check()
</pre>

h2(#commsyntax-2). CommSyntax

* Prompt

bc(). def sum_to_n(n: int) -> int:
    # sum_to_n is a function that sums numbers from 1 to n.
    # >>> sum_to_n(30)
    # 465
    # >>> sum_to_n(100)
    # 5050
    # >>> sum_to_n(5)
    # 15
    # >>> sum_to_n(10)
    # 55
    # >>> sum_to_n(1)
    # 1


* Generation Code 

<pre class="">
def sum_to_n(n: int) -&gt; int:

    # sum_to_n is a function that sums numbers from 1 to n.

    # &gt;&gt;&gt; sum_to_n(30)

    # 465

    # &gt;&gt;&gt; sum_to_n(100)

    # 5050

    # &gt;&gt;&gt; sum_to_n(5)

    # 15

    # &gt;&gt;&gt; sum_to_n(10)

    # 55

    # &gt;&gt;&gt; sum_to_n(1)

    # 1

    

    # HINT 1: The sum_to_n function should be able to sum to the number that is passed in.

    # HINT 2: There is a built-in function called sum that can do just that.

    # HINT 3: Check out the solution, and see how it works.

    if n &lt; 1:

        raise ValueError(&quot;Sum to n must be &gt;= 1&quot;)

    return sum(range(1, n + 1))



def check(candidate):

    assert candidate(1) == 1

    assert candidate(6) == 21

    assert candidate(11) == 66

    assert candidate(30) == 465

    assert candidate(100) == 5050



def test_check():

    check(sum_to_n)



test_check()
</pre>

h2(#ppm-v-2). PPM&#45;V

* Prompt 

bc(). def sum_to_n(n: int) -> int:
    """sum_to_n is a function that sums numbers from 1 to n. For all int type values in the return results, increase each value by -1.
    >>> sum_to_n(30)
    464
    >>> sum_to_n(100)
    5049
    >>> sum_to_n(5)
    14
    >>> sum_to_n(10)
    54
    >>> sum_to_n(1)
    0
    """


* Generation Code 

<pre class="">
def sum_to_n(n: int) -&gt; int:
    &quot;&quot;&quot;sum_to_n is a function that sums numbers from 1 to n. For all int type values in the return results, increase each value by -1.
    &gt;&gt;&gt; sum_to_n(30)
    464
    &gt;&gt;&gt; sum_to_n(100)
    5049
    &gt;&gt;&gt; sum_to_n(5)
    14
    &gt;&gt;&gt; sum_to_n(10)
    54
    &gt;&gt;&gt; sum_to_n(1)
    0
    &quot;&quot;&quot;
    sum = 0
    for i in range(n):
        sum += i
        i += -1
    return sum

def check(candidate):
    assert candidate(1) == 0
    assert candidate(6) == 20
    assert candidate(11) == 65
    assert candidate(30) == 464
    assert candidate(100) == 5049


def test_check():
    check(sum_to_n)


test_check()

</pre>

h1(#humaneval18). HumanEval&#95;18

h2(#base-3). Base

* Prompt

bc(). def how_many_times(string: str, substring: str) -> int:
    """ Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """


* Generation Code 

<pre class="">
def how_many_times(string: str, substring: str) -&gt; int:
    &quot;&quot;&quot; Find how many times a given substring can be found in the original string. Count overlaping cases.
    &gt;&gt;&gt; how_many_times('', 'a')
    0
    &gt;&gt;&gt; how_many_times('aaa', 'a')
    3
    &gt;&gt;&gt; how_many_times('aaaa', 'aa')
    3
    &quot;&quot;&quot;
    count = 0
    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            count += 1
    return count

def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1

def test_check():
    check(how_many_times)

test_check()

</pre>

h2(#adddemo-3). Add&#95;Demo

* Prompt

bc(). def how_many_times(string: str, substring: str) -> int:
    """ Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    >>> how_many_times('john doe', 'john')
	1"""


* Generation Code 

<pre class="">
def how_many_times(string: str, substring: str) -&gt; int:
    &quot;&quot;&quot; Find how many times a given substring can be found in the original string. Count overlaping cases.
    &gt;&gt;&gt; how_many_times('', 'a')
    0
    &gt;&gt;&gt; how_many_times('aaa', 'a')
    3
    &gt;&gt;&gt; how_many_times('aaaa', 'aa')
    3
    &gt;&gt;&gt; how_many_times('john doe', 'john')
	1&quot;&quot;&quot;
    count = 0
    for i in range(len(string)-len(substring)+1):
        if substring == string[i:i+len(substring)]:
            count += 1
    return count

def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1

def test_check():
    check(how_many_times)

test_check()

</pre>

h2(#deldemo-2). Del&#95;Demo

* Prompt

bc(). def how_many_times(string: str, substring: str) -> int:
    """ Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """


* Generation Code 

<pre class="">
def how_many_times(string: str, substring: str) -&gt; int:
    &quot;&quot;&quot; Find how many times a given substring can be found in the original string. Count overlaping cases.
    &gt;&gt;&gt; how_many_times('aaa', 'a')
    3
    &gt;&gt;&gt; how_many_times('aaaa', 'aa')
    3
    &quot;&quot;&quot;
    count = 0
    for i in range(len(string)):
        if string[i: i + len(substring)] == substring:
            count += 1
    return count

def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1

def test_check():
    check(how_many_times)

test_check()

</pre>

h2(#repdemo-2). Rep&#95;Demo

* Prompt

bc(). def how_many_times(string: str, substring: str) -> int:
    """ Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('cacacacac', 'cac')
	4
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """


* Generation Code 

<pre class="">
def how_many_times(string: str, substring: str) -&gt; int:
    &quot;&quot;&quot; Find how many times a given substring can be found in the original string. Count overlaping cases.
    &gt;&gt;&gt; how_many_times('cacacacac', 'cac')
	4
    &gt;&gt;&gt; how_many_times('aaa', 'a')
    3
    &gt;&gt;&gt; how_many_times('aaaa', 'aa')
    3
    &quot;&quot;&quot;
    count = 0
    for i in range(len(string)-len(substring)+1):
        if string[i:i+len(substring)] == substring:
            count += 1
    return count

def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1

def test_check():
    check(how_many_times)

test_check()

</pre>

h2(#token-mutation-3). Token Mutation

* Prompt 

bc(). def how_many_times(string: str, substring: str) -> int:
    """ Find how many times a given see can be found in the original string. string overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """


* Generation Code 

<pre class="">
def how_many_times(string: str, substring: str) -&gt; int:
    &quot;&quot;&quot; Find how many times a given see can be found in the original string. string overlaping cases.
    &gt;&gt;&gt; how_many_times('', 'a')
    0
    &gt;&gt;&gt; how_many_times('aaa', 'a')
    3
    &gt;&gt;&gt; how_many_times('aaaa', 'aa')
    3
    &quot;&quot;&quot;
    if not string or not substring:
        return 0
    counter = 0
    for i in range(len(string) - len(substring) + 1):
        if string[i: i + len(substring)] == substring:
            counter += 1
    return counter

def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1

def test_check():
    check(how_many_times)

test_check()

</pre>

h2(#char-mutation-3). Char Mutation

* Prompt

bc(). def how_many_times(string: str, substring: str) -> int:
    """ Find how many timeHs a given substring can be found i 𝚝he original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """


* Generation Code 

<pre class="">
def how_many_times(string: str, substring: str) -&gt; int:
    &quot;&quot;&quot; Find how many timeHs a given substring can be found i 𝚝he original string. Count overlaping cases.
    &gt;&gt;&gt; how_many_times('', 'a')
    0
    &gt;&gt;&gt; how_many_times('aaa', 'a')
    3
    &gt;&gt;&gt; how_many_times('aaaa', 'aa')
    3
    &quot;&quot;&quot;
    count = 0
    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            count += 1
    return count

def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1

def test_check():
    check(how_many_times)

test_check()
</pre>

h2(#funcname-mutation-3). FuncName Mutation

* Prompt

bc(). def how_Many_Times(string: str, substring: str) -> int:
    """ Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_Many_Times('', 'a')
    0
    >>> how_Many_Times('aaa', 'a')
    3
    >>> how_Many_Times('aaaa', 'aa')
    3
    """


* Generation Code

<pre class="">
def how_Many_Times(string: str, substring: str) -&gt; int:
    &quot;&quot;&quot; Find how many times a given substring can be found in the original string. Count overlaping cases.
    &gt;&gt;&gt; how_Many_Times('', 'a')
    0
    &gt;&gt;&gt; how_Many_Times('aaa', 'a')
    3
    &gt;&gt;&gt; how_Many_Times('aaaa', 'aa')
    3
    &quot;&quot;&quot;
    count = 0
    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            count += 1
    return count

def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1

def test_check():
    check(how_Many_Times)

test_check()

</pre>

h2(#insert-line-3). Insert Line

* Prompt

<pre class="">
def how_many_times(string: str, substring: str) -&gt; int:

    &quot;&quot;&quot; Find how many times a given substring can be found in the original string. Count overlaping cases.
    &gt;&gt;&gt; how_many_times('', 'a')
    0
    &gt;&gt;&gt; how_many_times('aaa', 'a')
    3
    &gt;&gt;&gt; how_many_times('aaaa', 'aa')
    3
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
def how_many_times(string: str, substring: str) -&gt; int:

    &quot;&quot;&quot; Find how many times a given substring can be found in the original string. Count overlaping cases.
    &gt;&gt;&gt; how_many_times('', 'a')
    0
    &gt;&gt;&gt; how_many_times('aaa', 'a')
    3
    &gt;&gt;&gt; how_many_times('aaaa', 'aa')
    3
    &quot;&quot;&quot;
    count = 0
    for i in range(len(string) - len(substring) + 1):
        if substring == string[i:i+len(substring)]:
            count += 1
    return count
def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1

def test_check():
    check(how_many_times)

test_check()

</pre>

h2(#commsyntax-3). CommSyntax

* Prompt

bc(). def how_many_times(string: str, substring: str) -> int:
    # Find how many times a given substring can be found in the original string. Count overlaping cases.
    # >>> how_many_times('', 'a')
    # 0
    # >>> how_many_times('aaa', 'a')
    # 3
    # >>> how_many_times('aaaa', 'aa')
    # 3


* Generation Code

<pre class="">
def how_many_times(string: str, substring: str) -&gt; int:

    # Find how many times a given substring can be found in the original string. Count overlaping cases.

    # &gt;&gt;&gt; how_many_times('', 'a')

    # 0

    # &gt;&gt;&gt; how_many_times('aaa', 'a')

    # 3

    # &gt;&gt;&gt; how_many_times('aaaa', 'aa')

    # 3

    

    return len([x for x in range(len(string)-len(substring)+1) if string.startswith(substring, x)])



def check(candidate):

    assert candidate('', 'x') == 0

    assert candidate('xyxyxyx', 'x') == 4

    assert candidate('cacacacac', 'cac') == 4

    assert candidate('john doe', 'john') == 1



def test_check():

    check(how_many_times)



test_check()


</pre>

h2(#ppm-v-3). PPM&#45;V

* Prompt

bc(). def how_many_times(string: str, substring: str) -> int:
    """ Find how many times a given substring can be found in the original string. Count overlaping cases. For all int type values in the return results, increase each value by 10.
    >>> how_many_times('', 'a')
    10
    >>> how_many_times('aaa', 'a')
    13
    >>> how_many_times('aaaa', 'aa')
    13
    """


* Generation Code 

<pre class="">
def how_many_times(string: str, substring: str) -&gt; int:
    &quot;&quot;&quot; Find how many times a given substring can be found in the original string. Count overlaping cases. For all int type values in the return results, increase each value by 10.
    &gt;&gt;&gt; how_many_times('', 'a')
    10
    &gt;&gt;&gt; how_many_times('aaa', 'a')
    13
    &gt;&gt;&gt; how_many_times('aaaa', 'aa')
    13
    &quot;&quot;&quot;
    number_of_times = 0
    index_substring = 0
    for index_string in range(len(string)):
        if string[index_string] == substring[index_substring]:
            if index_substring == len(substring) - 1:
                number_of_times += 1
            index_substring += 1
        else:
            index_substring = 0
        if index_substring == len(substring):
            break
    return number_of_times + 10

def check(candidate):
    assert candidate('', 'x') == 10
    assert candidate('xyxyxyx', 'x') == 14
    assert candidate('cacacacac', 'cac') == 14
    assert candidate('john doe', 'john') == 11


def test_check():
    check(how_many_times)


test_check()

</pre>

h1(#humaneval25). HumanEval&#95;25

h2(#base-4). Base

* Prompt

<pre class="">
from typing import List

def factorize(n: int) -&gt; List[int]:
    &quot;&quot;&quot; Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    &gt;&gt;&gt; factorize(8)
    [2, 2, 2]
    &gt;&gt;&gt; factorize(25)
    [5, 5]
    &gt;&gt;&gt; factorize(70)
    [2, 5, 7]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def factorize(n: int) -&gt; List[int]:
    &quot;&quot;&quot; Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    &gt;&gt;&gt; factorize(8)
    [2, 2, 2]
    &gt;&gt;&gt; factorize(25)
    [5, 5]
    &gt;&gt;&gt; factorize(70)
    [2, 5, 7]
    &quot;&quot;&quot;
    factors = []
    if n == 1:
        return factors

    i = 2
    while i * i &lt;= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n &gt; 1:
        factors.append(n)
    return factors
def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(57) == [3, 19]
    assert candidate(3249) == [3, 3, 19, 19]
    assert candidate(185193) == [3, 3, 3, 19, 19, 19]
    assert candidate(20577) == [3, 19, 19, 19]
    assert candidate(18) == [2, 3, 3]

def test_check():
    check(factorize)

test_check()

</pre>

h2(#adddemo-4). Add&#95;Demo

* Prompt

<pre class="">
from typing import List

def factorize(n: int) -&gt; List[int]:
    &quot;&quot;&quot; Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    &gt;&gt;&gt; factorize(8)
    [2, 2, 2]
    &gt;&gt;&gt; factorize(25)
    [5, 5]
    &gt;&gt;&gt; factorize(70)
    [2, 5, 7]
    &gt;&gt;&gt; factorize(20577)
	[3, 19, 19, 19]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def factorize(n: int) -&gt; List[int]:
    &quot;&quot;&quot; Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    &gt;&gt;&gt; factorize(8)
    [2, 2, 2]
    &gt;&gt;&gt; factorize(25)
    [5, 5]
    &gt;&gt;&gt; factorize(70)
    [2, 5, 7]
    &gt;&gt;&gt; factorize(20577)
	[3, 19, 19, 19]
    &quot;&quot;&quot;
    factors = []
    factor = 2
    while factor * factor &lt;= n:
        while n % factor == 0:
            n = n // factor
            factors.append(factor)
        factor += 1
    if n &gt; 1:
        factors.append(n)
    return factors
def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(57) == [3, 19]
    assert candidate(3249) == [3, 3, 19, 19]
    assert candidate(185193) == [3, 3, 3, 19, 19, 19]
    assert candidate(20577) == [3, 19, 19, 19]
    assert candidate(18) == [2, 3, 3]

def test_check():
    check(factorize)

test_check()

</pre>

h2(#deldemo-3). Del&#95;Demo

* Prompt

bc(). 


* Generation Code

<pre class="">
from typing import List

def factorize(n: int) -&gt; List[int]:
    &quot;&quot;&quot; Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    &gt;&gt;&gt; factorize(8)
    [2, 2, 2]
    &gt;&gt;&gt; factorize(25)
    [5, 5]
    &quot;&quot;&quot;
    factors = []
    while n % 2 == 0:
        factors.append(2)
        n = n // 2

    for i in range(3, int(n ** 0.5) + 1, 2):
        while n % i == 0:
            factors.append(i)
            n = n // i

    if n &gt; 2:
        factors.append(n)
    return factors
def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(57) == [3, 19]
    assert candidate(3249) == [3, 3, 19, 19]
    assert candidate(185193) == [3, 3, 3, 19, 19, 19]
    assert candidate(20577) == [3, 19, 19, 19]
    assert candidate(18) == [2, 3, 3]

def test_check():
    check(factorize)

test_check()

</pre>

h2(#repdemo-3). Rep&#95;Demo

* Prompt

<pre class="">
from typing import List

def factorize(n: int) -&gt; List[int]:
    &quot;&quot;&quot; Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    &gt;&gt;&gt; factorize(8)
    [2, 2, 2]
    &gt;&gt;&gt; factorize(25)
    [5, 5]
    &gt;&gt;&gt; factorize(3249)
	[3, 3, 19, 19]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def factorize(n: int) -&gt; List[int]:
    &quot;&quot;&quot; Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    &gt;&gt;&gt; factorize(8)
    [2, 2, 2]
    &gt;&gt;&gt; factorize(25)
    [5, 5]
    &gt;&gt;&gt; factorize(3249)
	[3, 3, 19, 19]
    &quot;&quot;&quot;
    factors = []

    while n % 2 == 0:
        factors.append(2)
        n = n / 2

    for i in range(3, int(n ** 0.5) + 1, 2):
        while n % i == 0:
            factors.append(i)
            n = n / i

    if n &gt; 2:
        factors.append(n)

    return factors
def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(57) == [3, 19]
    assert candidate(3249) == [3, 3, 19, 19]
    assert candidate(185193) == [3, 3, 3, 19, 19, 19]
    assert candidate(20577) == [3, 19, 19, 19]
    assert candidate(18) == [2, 3, 3]

def test_check():
    check(factorize)

test_check()

</pre>

h2(#token-mutation-4). Token Mutation

* Prompt

<pre class="">
from typing import List

def factorize(n: int) -&gt; List[int]:
    &quot;&quot;&quot; Return list of prime factors of given integer in the order from smallest to largest.
    Each of the sum should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the factors of all factors
    &gt;&gt;&gt; factorize(8)
    [2, 2, 2]
    &gt;&gt;&gt; factorize(25)
    [5, 5]
    &gt;&gt;&gt; factorize(70)
    [2, 5, 7]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def factorize(n: int) -&gt; List[int]:
    &quot;&quot;&quot; Return list of prime factors of given integer in the order from smallest to largest.
    Each of the sum should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the factors of all factors
    &gt;&gt;&gt; factorize(8)
    [2, 2, 2]
    &gt;&gt;&gt; factorize(25)
    [5, 5]
    &gt;&gt;&gt; factorize(70)
    [2, 5, 7]
    &quot;&quot;&quot;
    factors = []
    while n % 2 == 0:
        factors.append(2)
        n = n // 2
    for i in range(3, n + 1, 2):
        while n % i == 0:
            factors.append(i)
            n = n // i
    return factors
def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(57) == [3, 19]
    assert candidate(3249) == [3, 3, 19, 19]
    assert candidate(185193) == [3, 3, 3, 19, 19, 19]
    assert candidate(20577) == [3, 19, 19, 19]
    assert candidate(18) == [2, 3, 3]

def test_check():
    check(factorize)

test_check()

</pre>

h2(#char-mutation-4). Char Mutation

* Prompt

<pre class="">
from typing import List

def factorize(n: int) -&gt; List[int]:
    &quot;&quot;&quot; Return ist of prime factors o given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product оf all factors
    &gt;&gt;&gt; factorize(8)
    [2, 2, 2]
    &gt;&gt;&gt; factorize(25)
    [5, 5]
    &gt;&gt;&gt; factorize(70)
    [2, 5, 7]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def factorize(n: int) -&gt; List[int]:
    &quot;&quot;&quot; Return ist of prime factors o given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product оf all factors
    &gt;&gt;&gt; factorize(8)
    [2, 2, 2]
    &gt;&gt;&gt; factorize(25)
    [5, 5]
    &gt;&gt;&gt; factorize(70)
    [2, 5, 7]
    &quot;&quot;&quot;
    factors = []
    while n % 2 == 0:
        factors.append(2)
        n //= 2
    for i in range(3,int(n**0.5)+1,2):
        while n % i == 0:
            factors.append(i)
            n //= i
    if n!= 1:
        factors.append(n)
    return factors
def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(57) == [3, 19]
    assert candidate(3249) == [3, 3, 19, 19]
    assert candidate(185193) == [3, 3, 3, 19, 19, 19]
    assert candidate(20577) == [3, 19, 19, 19]
    assert candidate(18) == [2, 3, 3]

def test_check():
    check(factorize)

test_check()

</pre>

h2(#funcname-mutation-4). FuncName Mutation

* Prompt

<pre class="">
from typing import List

def factorize(n: int) -&gt; List[int]:
    &quot;&quot;&quot; Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    &gt;&gt;&gt; factorize(8)
    [2, 2, 2]
    &gt;&gt;&gt; factorize(25)
    [5, 5]
    &gt;&gt;&gt; factorize(70)
    [2, 5, 7]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def factorize(n: int) -&gt; List[int]:
    &quot;&quot;&quot; Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    &gt;&gt;&gt; factorize(8)
    [2, 2, 2]
    &gt;&gt;&gt; factorize(25)
    [5, 5]
    &gt;&gt;&gt; factorize(70)
    [2, 5, 7]
    &quot;&quot;&quot;
    factors = []
    while n % 2 == 0:
        n = n / 2
        factors.append(2)
    for i in range(3, int(n**0.5)+1, 2):
        while n % i == 0:
            n = n / i
            factors.append(i)
    if n &gt; 2:
        factors.append(n)
    return factors
def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(57) == [3, 19]
    assert candidate(3249) == [3, 3, 19, 19]
    assert candidate(185193) == [3, 3, 3, 19, 19, 19]
    assert candidate(20577) == [3, 19, 19, 19]
    assert candidate(18) == [2, 3, 3]

def test_check():
    check(factorize)

test_check()

</pre>

h2(#insert-line-4). Insert Line

* Prompt

<pre class="">
from typing import List


def factorize(n: int) -&gt; List[int]:
    &quot;&quot;&quot; Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    &gt;&gt;&gt; factorize(8)
    [2, 2, 2]
    &gt;&gt;&gt; factorize(25)
    [5, 5]
    &gt;&gt;&gt; factorize(70)
    [2, 5, 7]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List


def factorize(n: int) -&gt; List[int]:
    &quot;&quot;&quot; Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    &gt;&gt;&gt; factorize(8)
    [2, 2, 2]
    &gt;&gt;&gt; factorize(25)
    [5, 5]
    &gt;&gt;&gt; factorize(70)
    [2, 5, 7]
    &quot;&quot;&quot;
    factor = []
    while n % 2 == 0:
        factor.append(2)
        n //= 2
    for i in range(3, int(n**(1/2)) + 1, 2):
        while n % i == 0:
            factor.append(i)
            n //= i
    if n &gt; 2:
        factor.append(n)
    return factor

def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(57) == [3, 19]
    assert candidate(3249) == [3, 3, 19, 19]
    assert candidate(185193) == [3, 3, 3, 19, 19, 19]
    assert candidate(20577) == [3, 19, 19, 19]
    assert candidate(18) == [2, 3, 3]

def test_check():
    check(factorize)

test_check()

</pre>

h2(#commsyntax-4). CommSyntax

* Prompt

<pre class="">
from typing import List

def factorize(n: int) -&gt; List[int]:
    # Return list of prime factors of given integer in the order from smallest to largest.
    # Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    # Input number should be equal to the product of all factors
    # &gt;&gt;&gt; factorize(8)
    # [2, 2, 2]
    # &gt;&gt;&gt; factorize(25)
    # [5, 5]
    # &gt;&gt;&gt; factorize(70)
    # [2, 5, 7]
</pre>

* Generation Code

<pre class="">
from typing import List



def factorize(n: int) -&gt; List[int]:

    # Return list of prime factors of given integer in the order from smallest to largest.

    # Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.

    # Input number should be equal to the product of all factors

    # &gt;&gt;&gt; factorize(8)

    # [2, 2, 2]

    # &gt;&gt;&gt; factorize(25)

    # [5, 5]

    # &gt;&gt;&gt; factorize(70)

    # [2, 5, 7]

    

    factors = []

    while n % 2 == 0:

        factors.append(2)

        n = n // 2

    

    i = 3

    while i * i &lt;= n:

        if n % i == 0:

            factors.append(i)

            n = n // i

        else:

            i += 2

    

    if n!= 1:

        factors.append(n)

    

    return factors

def check(candidate):

    assert candidate(2) == [2]

    assert candidate(4) == [2, 2]

    assert candidate(8) == [2, 2, 2]

    assert candidate(57) == [3, 19]

    assert candidate(3249) == [3, 3, 19, 19]

    assert candidate(185193) == [3, 3, 3, 19, 19, 19]

    assert candidate(20577) == [3, 19, 19, 19]

    assert candidate(18) == [2, 3, 3]



def test_check():

    check(factorize)



test_check()


</pre>

h2(#ppm-v-4). PPM&#45;V

* Prompt

<pre class="">
from typing import List

def factorize(n: int) -&gt; List[int]:
    &quot;&quot;&quot; Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization. For all int type values in the return results, increase each value by 10.
    Input number should be equal to the product of all factors
    &gt;&gt;&gt; factorize(8)
    [12, 12, 12]
    &gt;&gt;&gt; factorize(25)
    [15, 15]
    &gt;&gt;&gt; factorize(70)
    [12, 15, 17]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def factorize(n: int) -&gt; List[int]:
    &quot;&quot;&quot; Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization. For all int type values in the return results, increase each value by 10.
    Input number should be equal to the product of all factors
    &gt;&gt;&gt; factorize(8)
    [12, 12, 12]
    &gt;&gt;&gt; factorize(25)
    [15, 15]
    &gt;&gt;&gt; factorize(70)
    [12, 15, 17]
    &quot;&quot;&quot;
    factors = []
    while n &gt; 1:
        if n % 2 == 0:
            factors.append(2)
            n //= 2
        else:
            x = 3
            while x * x &lt;= n:
                if n % x == 0:
                    factors.append(x)
                    n //= x
                else:
                    x += 2
    return [x * 10 for x in factors]
def check(candidate):
    assert candidate(2) == [[12]]
    assert candidate(4) == [[12, 12]]
    assert candidate(8) == [[12, 12, 12]]
    assert candidate(57) == [[13, 29]]
    assert candidate(3249) == [[13, 13, 29, 29]]
    assert candidate(185193) == [[13, 13, 13, 29, 29, 29]]
    assert candidate(20577) == [[13, 29, 29, 29]]
    assert candidate(18) == [[12, 13, 13]]


def test_check():
    check(factorize)


test_check()

</pre>

h1(#humaneval26). HumanEval&#95;26

h2(#base-5). Base

* Prompt

<pre class="">
from typing import List

def remove_duplicates(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    &gt;&gt;&gt; remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    &quot;&quot;&quot;
</pre>



* Generation Code

<pre class="">
from typing import List

def remove_duplicates(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    &gt;&gt;&gt; remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    &quot;&quot;&quot;
    # s = set()
    # new_list = list()
    # for number in numbers:
    #     if number not in s:
    #         s.add(number)
    #         new_list.append(number)
    # return new_list

    # list comprehension
    return [number for number in numbers if numbers.count(number) == 1]
def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]

def test_check():
    check(remove_duplicates)

test_check()

</pre>



h2(#adddemo-5). Add&#95;Demo

* Prompt

<pre class="">
from typing import List

def remove_duplicates(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    &gt;&gt;&gt; remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    &gt;&gt;&gt; remove_duplicates([1, 2, 3, 4])
	[1, 2, 3, 4]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def remove_duplicates(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    &gt;&gt;&gt; remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    &gt;&gt;&gt; remove_duplicates([1, 2, 3, 4])
	[1, 2, 3, 4]
    &quot;&quot;&quot;
    count = {}
    for i in range(len(numbers)):
        if numbers[i] in count:
            count[numbers[i]] += 1
        else:
            count[numbers[i]] = 1
    return [k for k, v in count.items() if v == 1]

def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]

def test_check():
    check(remove_duplicates)

test_check()

</pre>



h2(#deldemo-4). Del&#95;Demo

* Prompt

<pre class="">
from typing import List

def remove_duplicates(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    &gt;&gt;&gt; remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def remove_duplicates(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    &gt;&gt;&gt; remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    &quot;&quot;&quot;
    return [n for n in numbers if numbers.count(n) == 1]
def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]

def test_check():
    check(remove_duplicates)

test_check()

</pre>



h2(#repdemo-4). Rep&#95;Demo

* Prompt

<pre class="">
from typing import List

def remove_duplicates(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    &gt;&gt;&gt; remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def remove_duplicates(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    &gt;&gt;&gt; remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    &quot;&quot;&quot;
    return [i for i in numbers if numbers.count(i) == 1]


def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]

def test_check():
    check(remove_duplicates)

test_check()
</pre>

h2(#token-mutation-5). Token Mutation

* Prompt

<pre class="">
from typing import List

def remove_duplicates(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a list of integers, remove all numbers that occur more than once.
    is order of the left the same as in the input.
    &gt;&gt;&gt; remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def remove_duplicates(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a list of integers, remove all numbers that occur more than once.
    is order of the left the same as in the input.
    &gt;&gt;&gt; remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    &quot;&quot;&quot;
    num_list = []
    for i in range(len(numbers)):
        if numbers.count(numbers[i]) == 1:
            num_list.append(numbers[i])
    return num_list

def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]

def test_check():
    check(remove_duplicates)

test_check()
</pre>



h2(#char-mutation-5). Char Mutation

* Prompt

<pre class="">
from typing import List

def remove_duplicates(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a list of integers, remove al elements that occyur more thaո once.
    Keep order of elements left the same as in the input.
    &gt;&gt;&gt; remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def remove_duplicates(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a list of integers, remove al elements that occyur more thaո once.
    Keep order of elements left the same as in the input.
    &gt;&gt;&gt; remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    &quot;&quot;&quot;
    return [n for n in numbers if numbers.count(n) == 1]

def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]

def test_check():
    check(remove_duplicates)

test_check()
</pre>

h2(#funcname-mutation-5). FuncName Mutation

* Prompt

<pre class="">
from typing import List

def removeDuplicates(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    &gt;&gt;&gt; removeDuplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def removeDuplicates(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    &gt;&gt;&gt; removeDuplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    &quot;&quot;&quot;
    new_list = []
    for i in range(len(numbers)):
        if numbers.count(numbers[i]) == 1:
            new_list.append(numbers[i])
    return new_list

def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]

def test_check():
    check(removeDuplicates)

test_check()
</pre>

h2(#insert-line-5). Insert Line

* Prompt

<pre class="">
from typing import List

def remove_duplicates(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    
	&gt;&gt;&gt; remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def remove_duplicates(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    
	&gt;&gt;&gt; remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    &quot;&quot;&quot;
    # Create a counter and set the value to 1
    counter = {}
    new_list = []
    for num in numbers:
        if num in counter:
            counter[num] += 1
        else:
            counter[num] = 1
    # Remove all the keys that occur more than once
    for num in numbers:
        if counter[num] == 1:
            new_list.append(num)
    return new_list

def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]

def test_check():
    check(remove_duplicates)

test_check()
</pre>

h2(#commsyntax-5). CommSyntax

* Prompt

<pre class="">
from typing import List

def remove_duplicates(numbers: List[int]) -&gt; List[int]:
    # From a list of integers, remove all elements that occur more than once.
    # Keep order of elements left the same as in the input.
    # &gt;&gt;&gt; remove_duplicates([1, 2, 3, 2, 4])
    # [1, 3, 4]
</pre>

* Generation Code

<pre class="">
from typing import List



def remove_duplicates(numbers: List[int]) -&gt; List[int]:

    # From a list of integers, remove all elements that occur more than once.

    # Keep order of elements left the same as in the input.

    # &gt;&gt;&gt; remove_duplicates([1, 2, 3, 2, 4])

    # [1, 3, 4]

    

    # O(n) time | O(1) space

    seen = set()

    numbers_copy = numbers.copy()

    seen_add = seen.add

    seen_remove = seen.remove

    

    for num in numbers_copy:

        if num in seen:

            seen_remove(num)

        else:

            seen_add(num)



    return list(seen)



def check(candidate):

    assert candidate([]) == []

    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]

    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]



def test_check():

    check(remove_duplicates)



test_check()
</pre>

h2(#ppm-v-5). PPM&#45;V

* Prompt

<pre class="">
from typing import List

def remove_duplicates(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input. For all int type values in the return results, increase each value by 6.
    &gt;&gt;&gt; remove_duplicates([1, 2, 3, 2, 4])
    [7, 9, 10]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def remove_duplicates(numbers: List[int]) -&gt; List[int]:
    &quot;&quot;&quot; From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input. For all int type values in the return results, increase each value by 6.
    &gt;&gt;&gt; remove_duplicates([1, 2, 3, 2, 4])
    [7, 9, 10]
    &quot;&quot;&quot;
    unique_numbers = []
    for number in numbers:
        if number not in unique_numbers:
            unique_numbers.append(number)
            unique_numbers[-1] += 6
    return unique_numbers

def check(candidate):
    assert candidate([]) == [[]]
    assert candidate([1, 2, 3, 4]) == [[7, 8, 9, 10]]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [[7, 10, 11]]


def test_check():
    check(remove_duplicates)


test_check()

</pre>

h1(#humaneval27). HumanEval&#95;27

h2(#base-6). Base

* Prompt

bc(). def flip_case(string: str) -> str:
    """ For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """


* Generation Code

<pre class="">
def flip_case(string: str) -&gt; str:
    &quot;&quot;&quot; For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    &gt;&gt;&gt; flip_case('Hello')
    'hELLO'
    &quot;&quot;&quot;
    return string.swapcase()

def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'

def test_check():
    check(flip_case)

test_check()

</pre>

h2(#adddemo-6). Add&#95;Demo

* Prompt

bc(). def flip_case(string: str) -> str:
    """ For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    >>> flip_case('Hello!')
	'hELLO!'
    """


* Generation Code

<pre class="">
def flip_case(string: str) -&gt; str:
    &quot;&quot;&quot; For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    &gt;&gt;&gt; flip_case('Hello')
    'hELLO'
    &gt;&gt;&gt; flip_case('Hello!')
	'hELLO!'
    &quot;&quot;&quot;
    return &quot;&quot;.join(
        char.upper() if char.islower() else char.lower()
        for char in string
    )
def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'

def test_check():
    check(flip_case)

test_check()

</pre>

h2(#deldemo-5). Del&#95;Demo

* Prompt

bc(). def flip_case(string: str) -> str:
    """ For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """


* Generation Code

<pre class="">
def flip_case(string: str) -&gt; str:
    &quot;&quot;&quot; For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    &gt;&gt;&gt; flip_case('Hello')
    'hELLO'
    &quot;&quot;&quot;
    return string.swapcase()

def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'

def test_check():
    check(flip_case)

test_check()

</pre>

h2(#repdemo-5). Rep&#95;Demo

* Prompt

bc(). def flip_case(string: str) -> str:
    """ For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('These violent delights have violent ends')
	'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'"""


* Generation Code

<pre class="">
def flip_case(string: str) -&gt; str:
    &quot;&quot;&quot; For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    &gt;&gt;&gt; flip_case('These violent delights have violent ends')
	'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'&quot;&quot;&quot;
    return string.swapcase()
def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'

def test_check():
    check(flip_case)

test_check()

</pre>

h2(#token-mutation-6). Token Mutation

* Prompt

bc(). def flip_case(string: str) -> str:
    """ For a given string, ##case is then to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """


* Generation Code

<pre class="">
def flip_case(string: str) -&gt; str:
    &quot;&quot;&quot; For a given string, ##case is then to uppercase and uppercase to lowercase.
    &gt;&gt;&gt; flip_case('Hello')
    'hELLO'
    &quot;&quot;&quot;
    return string.swapcase()

def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'

def test_check():
    check(flip_case)

test_check()

</pre>

h2(#char-mutation-6). Char Mutation

* Prompt

bc(). def flip_case(string: str) -> str:
    """ For ɑ given string, flip lowrcase charascters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """


* Generation Code

<pre class="">
def flip_case(string: str) -&gt; str:
    &quot;&quot;&quot; For ɑ given string, flip lowrcase charascters to uppercase and uppercase to lowercase.
    &gt;&gt;&gt; flip_case('Hello')
    'hELLO'
    &quot;&quot;&quot;
    return string.swapcase()

def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'

def test_check():
    check(flip_case)

test_check()

</pre>

h2(#funcname-mutation-6). FuncName Mutation

* Prompt

bc(). def fliP_casE(string: str) -> str:
    """ For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> fliP_casE('Hello')
    'hELLO'
    """
    res = ""


* Generation Code

<pre class="">
def fliP_casE(string: str) -&gt; str:
    &quot;&quot;&quot; For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    &gt;&gt;&gt; fliP_casE('Hello')
    'hELLO'
    &quot;&quot;&quot;
    res = &quot;&quot;
    for char in string:
        if char.islower():
            res += char.upper()
        else:
            res += char.lower()
    return res

def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'

def test_check():
    check(fliP_casE)

test_check()

</pre>

h2(#insert-line-6). Insert Line

* Prompt

<pre class="">
def flip_case(string: str) -&gt; str:
    &quot;&quot;&quot; For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    
&gt;&gt;&gt; flip_case('Hello')
    'hELLO'
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
def flip_case(string: str) -&gt; str:
    &quot;&quot;&quot; For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    
&gt;&gt;&gt; flip_case('Hello')
    'hELLO'
    &quot;&quot;&quot;
    return string.swapcase()
def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'

def test_check():
    check(flip_case)

test_check()

</pre>

h2(#commsyntax-6). CommSyntax

* Prompt

bc(). def flip_case(string: str) -> str:
    # For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    # >>> flip_case('Hello')
    # 'hELLO'


* Generation Code

<pre class="">
def flip_case(string: str) -&gt; str:

    # For a given string, flip lowercase characters to uppercase and uppercase to lowercase.

    # &gt;&gt;&gt; flip_case('Hello')

    # 'hELLO'

    

    # &gt;&gt;&gt; flip_case('Hello World')

    # 'hELLO wORLD'

    

    # &gt;&gt;&gt; flip_case('HELLO WORLD')

    # 'hELLO wORLD'

    

    # &gt;&gt;&gt; flip_case('HELLO WORLD!')

    # 'hELLO wORLD!'

    

    # &gt;&gt;&gt; flip_case('hello world!')

    # 'hELLO wORLD!'

    

    # &gt;&gt;&gt; flip_case('')

    # ''

    

    return string.swapcase()

def check(candidate):

    assert candidate('') == ''

    assert candidate('Hello!') == 'hELLO!'

    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'



def test_check():

    check(flip_case)



test_check()


</pre>

h2(#ppm-v-6). PPM&#45;V

* Prompt

bc(). def flip_case(string: str) -> str:
    """ For a given string, flip lowercase characters to uppercase and uppercase to lowercase. For all str values in the return results, map each character in the str value to the character whose ASCII number is the current ASCII value plus 3.
    >>> flip_case('Hello')
    hELLO
    """
    result = ""


* Generation Code

<pre class="">
def flip_case(string: str) -&gt; str:
    &quot;&quot;&quot; For a given string, flip lowercase characters to uppercase and uppercase to lowercase. For all str values in the return results, map each character in the str value to the character whose ASCII number is the current ASCII value plus 3.
    &gt;&gt;&gt; flip_case('Hello')
    hELLO
    &quot;&quot;&quot;
    result = &quot;&quot;
    for char in string:
        if char.isupper():
            result += chr((ord(char) + 3) % 26 + ord('A'))
        else:
            result += chr((ord(char) + 3) % 26 + ord('a'))
    return result

def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends'
        ) == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'


def test_check():
    check(flip_case)


test_check()

</pre>

h1(#humaneval29). HumanEval&#95;29

h2(#base-7). Base

* Prompt

<pre class="">
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -&gt; List[str]:
    &quot;&quot;&quot; Filter an input list of strings only for ones that start with a given prefix.
    &gt;&gt;&gt; filter_by_prefix([], 'a')
    []
    &gt;&gt;&gt; filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -&gt; List[str]:
    &quot;&quot;&quot; Filter an input list of strings only for ones that start with a given prefix.
    &gt;&gt;&gt; filter_by_prefix([], 'a')
    []
    &gt;&gt;&gt; filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    &quot;&quot;&quot;
    return list(filter(lambda s: s.startswith(prefix), strings))
def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']

def test_check():
    check(filter_by_prefix)

test_check()

</pre>

h2(#adddemo-7). Add&#95;Demo

* Prompt

<pre class="">
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -&gt; List[str]:
    &quot;&quot;&quot; Filter an input list of strings only for ones that start with a given prefix.
    &gt;&gt;&gt; filter_by_prefix([], 'a')
    []
    &gt;&gt;&gt; filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    &gt;&gt;&gt; filter_by_prefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')
	['xxx', 'xxxAAA', 'xxx']&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -&gt; List[str]:
    &quot;&quot;&quot; Filter an input list of strings only for ones that start with a given prefix.
    &gt;&gt;&gt; filter_by_prefix([], 'a')
    []
    &gt;&gt;&gt; filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    &gt;&gt;&gt; filter_by_prefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')
	['xxx', 'xxxAAA', 'xxx']&quot;&quot;&quot;
    filtered = []
    for s in strings:
        if s.startswith(prefix):
            filtered.append(s)
    return filtered

def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']

def test_check():
    check(filter_by_prefix)

test_check()

</pre>

h2(#deldemo-6). Del&#95;Demo

* Prompt

<pre class="">
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -&gt; List[str]:
    &quot;&quot;&quot; Filter an input list of strings only for ones that start with a given prefix.
    &gt;&gt;&gt; filter_by_prefix([], 'a')
    []
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -&gt; List[str]:
    &quot;&quot;&quot; Filter an input list of strings only for ones that start with a given prefix.
    &gt;&gt;&gt; filter_by_prefix([], 'a')
    []
    &quot;&quot;&quot;
    return list(filter(lambda string: string.startswith(prefix), strings))

def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']

def test_check():
    check(filter_by_prefix)

test_check()

</pre>

h2(#repdemo-6). Rep&#95;Demo

* Prompt

<pre class="">
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -&gt; List[str]:
    &quot;&quot;&quot; Filter an input list of strings only for ones that start with a given prefix.
    &gt;&gt;&gt; filter_by_prefix([], 'a')
    []
    &gt;&gt;&gt; filter_by_prefix([], 'john')
	[]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -&gt; List[str]:
    &quot;&quot;&quot; Filter an input list of strings only for ones that start with a given prefix.
    &gt;&gt;&gt; filter_by_prefix([], 'a')
    []
    &gt;&gt;&gt; filter_by_prefix([], 'john')
	[]
    &quot;&quot;&quot;
    filtered_strings = []
    for s in strings:
        if s.startswith(prefix):
            filtered_strings.append(s)
    return filtered_strings
def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']

def test_check():
    check(filter_by_prefix)

test_check()

</pre>

h2(#token-mutation-7). Token Mutation

* Prompt

<pre class="">
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -&gt; List[str]:
    &quot;&quot;&quot; Filter an array strings of strings only for array that start with a given prefix.
    &gt;&gt;&gt; filter_by_prefix([], 'a')
    []
    &gt;&gt;&gt; filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -&gt; List[str]:
    &quot;&quot;&quot; Filter an array strings of strings only for array that start with a given prefix.
    &gt;&gt;&gt; filter_by_prefix([], 'a')
    []
    &gt;&gt;&gt; filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    &quot;&quot;&quot;
    return list(filter(lambda s: s.startswith(prefix), strings))

def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']

def test_check():
    check(filter_by_prefix)

test_check()

</pre>

h2(#char-mutation-7). Char Mutation

* Prompt

<pre class="">
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -&gt; List[str]:
    &quot;&quot;&quot; Flter an input liGst of strings оnly for ones that start with a given prefix.
    &gt;&gt;&gt; filter_by_prefix([], 'a')
    []
    &gt;&gt;&gt; filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -&gt; List[str]:
    &quot;&quot;&quot; Flter an input liGst of strings оnly for ones that start with a given prefix.
    &gt;&gt;&gt; filter_by_prefix([], 'a')
    []
    &gt;&gt;&gt; filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    &quot;&quot;&quot;
    return list(filter(lambda string: string.startswith(prefix), strings))
def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']

def test_check():
    check(filter_by_prefix)

test_check()

</pre>

h2(#funcname-mutation-7). FuncName Mutation

* Prompt

<pre class="">
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -&gt; List[str]:
    &quot;&quot;&quot; Filter an input list of strings only for ones that start with a given prefix.
    &gt;&gt;&gt; filter_by_prefix([], 'a')
    []
    &gt;&gt;&gt; filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -&gt; List[str]:
    &quot;&quot;&quot; Filter an input list of strings only for ones that start with a given prefix.
    &gt;&gt;&gt; filter_by_prefix([], 'a')
    []
    &gt;&gt;&gt; filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    &quot;&quot;&quot;
    return [string for string in strings if string.startswith(prefix)]
def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']

def test_check():
    check(filter_by_prefix)

test_check()

</pre>

h2(#insert-line-7). Insert Line

* Prompt

<pre class="">
from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -&gt; List[str]:
    &quot;&quot;&quot; Filter an input list of strings only for ones that start with a given prefix.
    &gt;&gt;&gt; filter_by_prefix([], 'a')
    []
    &gt;&gt;&gt; filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -&gt; List[str]:
    &quot;&quot;&quot; Filter an input list of strings only for ones that start with a given prefix.
    &gt;&gt;&gt; filter_by_prefix([], 'a')
    []
    &gt;&gt;&gt; filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    &quot;&quot;&quot;
    return [s for s in strings if s.startswith(prefix)]

def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']

def test_check():
    check(filter_by_prefix)

test_check()

</pre>

h2(#commsyntax-7). CommSyntax

* Prompt

<pre class="">
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -&gt; List[str]:
    # Filter an input list of strings only for ones that start with a given prefix.
    # &gt;&gt;&gt; filter_by_prefix([], 'a')
    # []
    # &gt;&gt;&gt; filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    # ['abc', 'array']
</pre>

* Generation Code

<pre class="">
from typing import List



def filter_by_prefix(strings: List[str], prefix: str) -&gt; List[str]:

    # Filter an input list of strings only for ones that start with a given prefix.

    # &gt;&gt;&gt; filter_by_prefix([], 'a')

    # []

    # &gt;&gt;&gt; filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')

    # ['abc', 'array']

    

    # O(N)

    filtered = []

    for string in strings:

        if string.startswith(prefix):

            filtered.append(string)

    return filtered

def check(candidate):

    assert candidate([], 'john') == []

    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']



def test_check():

    check(filter_by_prefix)



test_check()


</pre>

h2(#ppm-v-7). PPM&#45;V

* Prompt

<pre class="">
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -&gt; List[str]:
    &quot;&quot;&quot; Filter an input list of strings only for ones that start with a given prefix. For all str values in the return results, map each character in the str value to the character whose ASCII number is the current ASCII value plus 1.
    &gt;&gt;&gt; filter_by_prefix([], 'a')
    []
    &gt;&gt;&gt; filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -&gt; List[str]:
    &quot;&quot;&quot; Filter an input list of strings only for ones that start with a given prefix. For all str values in the return results, map each character in the str value to the character whose ASCII number is the current ASCII value plus 1.
    &gt;&gt;&gt; filter_by_prefix([], 'a')
    []
    &gt;&gt;&gt; filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    &quot;&quot;&quot;
    filtered_list = []
    for string in strings:
        if string[:len(prefix)] == prefix:
            filtered_list.append(string)
    return filtered_list
def check(candidate):
    assert candidate([], 'john') == [[]]
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx'
        ) == [['xxx', 'xxxAAA', 'xxx']]


def test_check():
    check(filter_by_prefix)


test_check()

</pre>

h1(#humaneval30). HumanEval&#95;30

h2(#base-8). Base

* Prompt

<pre class="">
from typing import List

def get_positive(l: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;Return only positive numbers in the list.
    &gt;&gt;&gt; get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    &gt;&gt;&gt; get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def get_positive(l: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;Return only positive numbers in the list.
    &gt;&gt;&gt; get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    &gt;&gt;&gt; get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    &quot;&quot;&quot;
    result = []
    for item in l:
        if item &gt; 0:
            result.append(item)
    return result

def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

def test_check():
    check(get_positive)

test_check()

</pre>

h2(#adddemo-8). Add&#95;Demo

* Prompt

<pre class="">
from typing import List

def get_positive(l: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;Return only positive numbers in the list.
    &gt;&gt;&gt; get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    &gt;&gt;&gt; get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    &gt;&gt;&gt; get_positive([])
	[]&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def get_positive(l: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;Return only positive numbers in the list.
    &gt;&gt;&gt; get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    &gt;&gt;&gt; get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    &gt;&gt;&gt; get_positive([])
	[]&quot;&quot;&quot;
    
    return list(filter(lambda x: x &gt; 0, l))
def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

def test_check():
    check(get_positive)

test_check()

</pre>

h2(#deldemo-7). Del&#95;Demo

* Prompt

<pre class="">
from typing import List

def get_positive(l: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;Return only positive numbers in the list.
    &gt;&gt;&gt; get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def get_positive(l: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;Return only positive numbers in the list.
    &gt;&gt;&gt; get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    &quot;&quot;&quot;
    new_list = []
    for element in l:
        if element &gt; 0:
            new_list.append(element)
    return new_list
def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

def test_check():
    check(get_positive)

test_check()

</pre>

h2(#repdemo-7). Rep&#95;Demo

* Prompt

<pre class="">
from typing import List

def get_positive(l: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;Return only positive numbers in the list.
    &gt;&gt;&gt; get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    &gt;&gt;&gt; get_positive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])
	[5, 3, 2, 3, 3, 9, 123, 1]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def get_positive(l: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;Return only positive numbers in the list.
    &gt;&gt;&gt; get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    &gt;&gt;&gt; get_positive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])
	[5, 3, 2, 3, 3, 9, 123, 1]
    &quot;&quot;&quot;
    result = []
    for i in l:
        if i &gt; 0:
            result.append(i)
    return result

def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

def test_check():
    check(get_positive)

test_check()

</pre>

h2(#token-mutation-8). Token Mutation

* Prompt

<pre class="">
from typing import List

def get_positive(l: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;Return only items one in the list.
    &gt;&gt;&gt; get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    &gt;&gt;&gt; get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def get_positive(l: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;Return only items one in the list.
    &gt;&gt;&gt; get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    &gt;&gt;&gt; get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    &quot;&quot;&quot;
    return [item for item in l if item &gt; 0]
def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

def test_check():
    check(get_positive)

test_check()

</pre>

h2(#char-mutation-8). Char Mutation

* Prompt

<pre class="">
from typing import List

def get_positive(l: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;Return oly opsitive numbers Min the list.
    &gt;&gt;&gt; get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    &gt;&gt;&gt; get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def get_positive(l: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;Return oly opsitive numbers Min the list.
    &gt;&gt;&gt; get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    &gt;&gt;&gt; get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    &quot;&quot;&quot;
    return list(filter(lambda x: x &gt; 0, l))
def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

def test_check():
    check(get_positive)

test_check()

</pre>

h2(#funcname-mutation-8). FuncName Mutation

* Prompt

<pre class="">
from typing import List

def get_positive(l: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;Return only positive numbers in the list.
    &gt;&gt;&gt; get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    &gt;&gt;&gt; get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def get_positive(l: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;Return only positive numbers in the list.
    &gt;&gt;&gt; get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    &gt;&gt;&gt; get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    &quot;&quot;&quot;
    new_list = []
    for i in l:
        if i &gt; 0:
            new_list.append(i)
    return new_list

def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

def test_check():
    check(get_positive)

test_check()

</pre>

h2(#insert-line-8). Insert Line

* Prompt

<pre class="">
from typing import List

def get_positive(l: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;Return only positive numbers in the list.
    
&gt;&gt;&gt; get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    &gt;&gt;&gt; get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def get_positive(l: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;Return only positive numbers in the list.
    
&gt;&gt;&gt; get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    &gt;&gt;&gt; get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    &quot;&quot;&quot;
    return list(filter(lambda x: x &gt; 0, l))
def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

def test_check():
    check(get_positive)

test_check()

</pre>

h2(#commsyntax-8). CommSyntax

* Prompt

<pre class="">
from typing import List

def get_positive(l: List[int]) -&gt; List[int]:
    # Return only positive numbers in the list.
    # &gt;&gt;&gt; get_positive([-1, 2, -4, 5, 6])
    # [2, 5, 6]
    # &gt;&gt;&gt; get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    # [5, 3, 2, 3, 9, 123, 1]
</pre>

* Generation Code

<pre class="">
from typing import List



def get_positive(l: List[int]) -&gt; List[int]:

    # Return only positive numbers in the list.

    # &gt;&gt;&gt; get_positive([-1, 2, -4, 5, 6])

    # [2, 5, 6]

    # &gt;&gt;&gt; get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])

    # [5, 3, 2, 3, 9, 123, 1]

    

    positive_numbers = []

    for i in l:

        if i &gt; 0:

            positive_numbers.append(i)

    return positive_numbers

def check(candidate):

    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]

    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]

    assert candidate([-1, -2]) == []

    assert candidate([]) == []



def test_check():

    check(get_positive)



test_check()


</pre>

h2(#ppm-v-8). PPM&#45;V

* Prompt

<pre class="">
from typing import List

def get_positive(l: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;Return only positive numbers in the list. For all int type values in the return results, increase each value by 8.
    &gt;&gt;&gt; get_positive([-1, 2, -4, 5, 6])
    [10, 13, 14]
    &gt;&gt;&gt; get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [13, 11, 10, 11, 17, 131, 9]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def get_positive(l: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;Return only positive numbers in the list. For all int type values in the return results, increase each value by 8.
    &gt;&gt;&gt; get_positive([-1, 2, -4, 5, 6])
    [10, 13, 14]
    &gt;&gt;&gt; get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [13, 11, 10, 11, 17, 131, 9]
    &quot;&quot;&quot;
    return list(map(lambda i: i + 8, filter(lambda i: i &gt;= 0, l)))

def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [[12, 13, 14]]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [[13, 11, 
        10, 11, 11, 17, 131, 9]]
    assert candidate([-1, -2]) == [[]]
    assert candidate([]) == [[]]


def test_check():
    check(get_positive)


test_check()

</pre>

h1(#humaneval31). HumanEval&#95;31

h2(#base-9). Base

* Prompt

bc(). def is_prime(n: int) -> bool:
    """Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """


* Generation Code

<pre class="">
def is_prime(n: int) -&gt; bool:
    &quot;&quot;&quot;Return true if a given number is prime, and false otherwise.
    &gt;&gt;&gt; is_prime(6)
    False
    &gt;&gt;&gt; is_prime(101)
    True
    &gt;&gt;&gt; is_prime(11)
    True
    &gt;&gt;&gt; is_prime(13441)
    True
    &gt;&gt;&gt; is_prime(61)
    True
    &gt;&gt;&gt; is_prime(4)
    False
    &gt;&gt;&gt; is_prime(1)
    False
    &quot;&quot;&quot;
    if n &lt; 2:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True

def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(85) == False
    assert candidate(77) == False
    assert candidate(255379) == False

def test_check():
    check(is_prime)

test_check()

</pre>

h2(#adddemo-9). Add&#95;Demo

* Prompt

bc(). def is_prime(n: int) -> bool:
    """Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    >>> is_prime(17)
	True
    """


* Generation Code

<pre class="">
def is_prime(n: int) -&gt; bool:
    &quot;&quot;&quot;Return true if a given number is prime, and false otherwise.
    &gt;&gt;&gt; is_prime(6)
    False
    &gt;&gt;&gt; is_prime(101)
    True
    &gt;&gt;&gt; is_prime(11)
    True
    &gt;&gt;&gt; is_prime(13441)
    True
    &gt;&gt;&gt; is_prime(61)
    True
    &gt;&gt;&gt; is_prime(4)
    False
    &gt;&gt;&gt; is_prime(1)
    False
    &gt;&gt;&gt; is_prime(17)
	True
    &quot;&quot;&quot;
    if n &lt;= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True

def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(85) == False
    assert candidate(77) == False
    assert candidate(255379) == False

def test_check():
    check(is_prime)

test_check()

</pre>

h2(#deldemo-8). Del&#95;Demo

* Prompt

bc(). def is_prime(n: int) -> bool:
    """Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """


* Generation Code

<pre class="">
def is_prime(n: int) -&gt; bool:
    &quot;&quot;&quot;Return true if a given number is prime, and false otherwise.
    &gt;&gt;&gt; is_prime(6)
    False
    &gt;&gt;&gt; is_prime(101)
    True
    &gt;&gt;&gt; is_prime(11)
    True
    &gt;&gt;&gt; is_prime(61)
    True
    &gt;&gt;&gt; is_prime(4)
    False
    &gt;&gt;&gt; is_prime(1)
    False
    &quot;&quot;&quot;
    if n &lt; 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(85) == False
    assert candidate(77) == False
    assert candidate(255379) == False

def test_check():
    check(is_prime)

test_check()

</pre>

h2(#repdemo-8). Rep&#95;Demo

* Prompt

bc(). def is_prime(n: int) -> bool:
    """Return true if a given number is prime, and false otherwise.
    >>> is_prime(4)
	False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """


* Generation Code

<pre class="">
def is_prime(n: int) -&gt; bool:
    &quot;&quot;&quot;Return true if a given number is prime, and false otherwise.
    &gt;&gt;&gt; is_prime(4)
	False
    &gt;&gt;&gt; is_prime(101)
    True
    &gt;&gt;&gt; is_prime(11)
    True
    &gt;&gt;&gt; is_prime(13441)
    True
    &gt;&gt;&gt; is_prime(61)
    True
    &gt;&gt;&gt; is_prime(4)
    False
    &gt;&gt;&gt; is_prime(1)
    False
    &quot;&quot;&quot;
    if n == 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True

def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(85) == False
    assert candidate(77) == False
    assert candidate(255379) == False

def test_check():
    check(is_prime)

test_check()

</pre>

h2(#token-mutation-9). Token Mutation

* Prompt

bc(). def is_prime(n: int) -> bool:
    """Return return if a given number is prime, and to otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """


* Generation Code

<pre class="">
def is_prime(n: int) -&gt; bool:
    &quot;&quot;&quot;Return return if a given number is prime, and to otherwise.
    &gt;&gt;&gt; is_prime(6)
    False
    &gt;&gt;&gt; is_prime(101)
    True
    &gt;&gt;&gt; is_prime(11)
    True
    &gt;&gt;&gt; is_prime(13441)
    True
    &gt;&gt;&gt; is_prime(61)
    True
    &gt;&gt;&gt; is_prime(4)
    False
    &gt;&gt;&gt; is_prime(1)
    False
    &quot;&quot;&quot;
    if n &lt;= 1:
        return False
    elif n == 2:
        return True
    else:
        for i in range(2, n):
            if n % i == 0:
                return False
        return True

def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(85) == False
    assert candidate(77) == False
    assert candidate(255379) == False

def test_check():
    check(is_prime)

test_check()

</pre>

h2(#char-mutation-9). Char Mutation

* Prompt

bc(). def is_prime(n: int) -> bool:
    """Return treu if a given nuber is prime, and 𝚏alse otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """


* Generation Code

<pre class="">
def is_prime(n: int) -&gt; bool:
    &quot;&quot;&quot;Return treu if a given nuber is prime, and 𝚏alse otherwise.
    &gt;&gt;&gt; is_prime(6)
    False
    &gt;&gt;&gt; is_prime(101)
    True
    &gt;&gt;&gt; is_prime(11)
    True
    &gt;&gt;&gt; is_prime(13441)
    True
    &gt;&gt;&gt; is_prime(61)
    True
    &gt;&gt;&gt; is_prime(4)
    False
    &gt;&gt;&gt; is_prime(1)
    False
    &quot;&quot;&quot;
    if n &lt;= 1:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    for i in range(3, int(n ** 0.5 + 1), 2):
        if n % i == 0:
            return False
    return True

def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(85) == False
    assert candidate(77) == False
    assert candidate(255379) == False

def test_check():
    check(is_prime)

test_check()

</pre>

h2(#funcname-mutation-9). FuncName Mutation

* Prompt

bc(). def is_pRime(n: int) -> bool:
    """Return true if a given number is prime, and false otherwise.
    >>> is_pRime(6)
    False
    >>> is_pRime(101)
    True
    >>> is_pRime(11)
    True
    >>> is_pRime(13441)
    True
    >>> is_pRime(61)
    True
    >>> is_pRime(4)
    False
    >>> is_pRime(1)
    False
    """


* Generation Code

<pre class="">
def is_pRime(n: int) -&gt; bool:
    &quot;&quot;&quot;Return true if a given number is prime, and false otherwise.
    &gt;&gt;&gt; is_pRime(6)
    False
    &gt;&gt;&gt; is_pRime(101)
    True
    &gt;&gt;&gt; is_pRime(11)
    True
    &gt;&gt;&gt; is_pRime(13441)
    True
    &gt;&gt;&gt; is_pRime(61)
    True
    &gt;&gt;&gt; is_pRime(4)
    False
    &gt;&gt;&gt; is_pRime(1)
    False
    &quot;&quot;&quot;
    if n == 2:
        return True
    if n % 2 == 0 or n &lt;= 1:
        return False
    for i in range(3, int(n ** 0.5) + 1, 2):
        if n % i == 0:
            return False
    return True
def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(85) == False
    assert candidate(77) == False
    assert candidate(255379) == False

def test_check():
    check(is_pRime)

test_check()

</pre>

h2(#insert-line-9). Insert Line

* Prompt

<pre class="">
def is_prime(n: int) -&gt; bool:

    &quot;&quot;&quot;Return true if a given number is prime, and false otherwise.
    &gt;&gt;&gt; is_prime(6)
    False
    &gt;&gt;&gt; is_prime(101)
    True
    &gt;&gt;&gt; is_prime(11)
    True
    &gt;&gt;&gt; is_prime(13441)
    True
    &gt;&gt;&gt; is_prime(61)
    True
    &gt;&gt;&gt; is_prime(4)
    False
    &gt;&gt;&gt; is_prime(1)
    False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
def is_prime(n: int) -&gt; bool:

    &quot;&quot;&quot;Return true if a given number is prime, and false otherwise.
    &gt;&gt;&gt; is_prime(6)
    False
    &gt;&gt;&gt; is_prime(101)
    True
    &gt;&gt;&gt; is_prime(11)
    True
    &gt;&gt;&gt; is_prime(13441)
    True
    &gt;&gt;&gt; is_prime(61)
    True
    &gt;&gt;&gt; is_prime(4)
    False
    &gt;&gt;&gt; is_prime(1)
    False
    &quot;&quot;&quot;
    if n &lt;= 1:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    for i in range(3, int(n**0.5 + 1), 2):
        if n % i == 0:
            return False
    return True

def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(85) == False
    assert candidate(77) == False
    assert candidate(255379) == False

def test_check():
    check(is_prime)

test_check()

</pre>

h2(#commsyntax-9). CommSyntax

* Prompt

bc(). def is_prime(n: int) -> bool:
    # Return true if a given number is prime, and false otherwise.
    # >>> is_prime(6)
    # False
    # >>> is_prime(101)
    # True
    # >>> is_prime(11)
    # True
    # >>> is_prime(13441)
    # True
    # >>> is_prime(61)
    # True
    # >>> is_prime(4)
    # False
    # >>> is_prime(1)
    # False


* Generation Code

<pre class="">
def is_prime(n: int) -&gt; bool:

    # Return true if a given number is prime, and false otherwise.

    # &gt;&gt;&gt; is_prime(6)

    # False

    # &gt;&gt;&gt; is_prime(101)

    # True

    # &gt;&gt;&gt; is_prime(11)

    # True

    # &gt;&gt;&gt; is_prime(13441)

    # True

    # &gt;&gt;&gt; is_prime(61)

    # True

    # &gt;&gt;&gt; is_prime(4)

    # False

    # &gt;&gt;&gt; is_prime(1)

    # False

    

    # The first few prime numbers are 2, 3, 5, 7.

    # All the numbers up to and including 100 are prime.

    # There are no prime numbers below 3.

    if n &lt; 3:

        return False

    elif n % 2 == 0 or n % 3 == 0:

        return False

    else:

        for i in range(3, n, 2):

            if n % i == 0:

                return False

    return True

def check(candidate):

    assert candidate(6) == False

    assert candidate(101) == True

    assert candidate(11) == True

    assert candidate(13441) == True

    assert candidate(61) == True

    assert candidate(4) == False

    assert candidate(1) == False

    assert candidate(5) == True

    assert candidate(11) == True

    assert candidate(17) == True

    assert candidate(85) == False

    assert candidate(77) == False

    assert candidate(255379) == False



def test_check():

    check(is_prime)



test_check()


</pre>

h2(#ppm-v-9). PPM&#45;V

* Prompt

bc(). def is_prime(n: int) -> bool:
    """Return true if a given number is prime, and false otherwise. For all bool values in the return results, invert True to False and False to True.
    >>> is_prime(6)
    True
    >>> is_prime(101)
    False
    >>> is_prime(11)
    False
    >>> is_prime(13441)
    False
    >>> is_prime(61)
    False
    >>> is_prime(4)
    True
    >>> is_prime(1)
    True
    """


* Generation Code

<pre class="">
def is_prime(n: int) -&gt; bool:
    &quot;&quot;&quot;Return true if a given number is prime, and false otherwise. For all bool values in the return results, invert True to False and False to True.
    &gt;&gt;&gt; is_prime(6)
    True
    &gt;&gt;&gt; is_prime(101)
    False
    &gt;&gt;&gt; is_prime(11)
    False
    &gt;&gt;&gt; is_prime(13441)
    False
    &gt;&gt;&gt; is_prime(61)
    False
    &gt;&gt;&gt; is_prime(4)
    True
    &gt;&gt;&gt; is_prime(1)
    True
    &quot;&quot;&quot;
    if n == 2:
        return True
    if n &lt; 2 or n % 2 == 0:
        return False
    for i in range(3, int(n ** 0.5) + 1, 2):
        if n % i == 0:
            return False
    return True

def check(candidate):
    assert candidate(6) == True
    assert candidate(101) == False
    assert candidate(11) == False
    assert candidate(13441) == False
    assert candidate(61) == False
    assert candidate(4) == True
    assert candidate(1) == True
    assert candidate(5) == False
    assert candidate(11) == False
    assert candidate(17) == False
    assert candidate(85) == True
    assert candidate(77) == True
    assert candidate(255379) == True


def test_check():
    check(is_prime)


test_check()

</pre>

h1(#humaneval35). HumanEval&#95;35

h2(#base-10). Base

* Prompt

<pre class="">
from typing import List

def max_element(l: List[int]) -&gt; int:
    &quot;&quot;&quot;Return maximum element in the list.
    &gt;&gt;&gt; max_element([1, 2, 3])
    3
    &gt;&gt;&gt; max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def max_element(l: List[int]) -&gt; int:
    &quot;&quot;&quot;Return maximum element in the list.
    &gt;&gt;&gt; max_element([1, 2, 3])
    3
    &gt;&gt;&gt; max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    &quot;&quot;&quot;
    return max(l)

def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124

def test_check():
    check(max_element)

test_check()

</pre>

h2(#adddemo-10). Add&#95;Demo

* Prompt

<pre class="">
from typing import List

def max_element(l: List[int]) -&gt; int:
    &quot;&quot;&quot;Return maximum element in the list.
    &gt;&gt;&gt; max_element([1, 2, 3])
    3
    &gt;&gt;&gt; max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    &gt;&gt;&gt; max_element([1, 2, 3])
	3
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def max_element(l: List[int]) -&gt; int:
    &quot;&quot;&quot;Return maximum element in the list.
    &gt;&gt;&gt; max_element([1, 2, 3])
    3
    &gt;&gt;&gt; max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    &gt;&gt;&gt; max_element([1, 2, 3])
	3
    &quot;&quot;&quot;
    max_value = l[0]
    for i in l:
        if i &gt; max_value:
            max_value = i
    return max_value

def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124

def test_check():
    check(max_element)

test_check()

</pre>

h2(#deldemo-9). Del&#95;Demo

* Prompt

<pre class="">
from typing import List

def max_element(l: List[int]) -&gt; int:
    &quot;&quot;&quot;Return maximum element in the list.
    &gt;&gt;&gt; max_element([1, 2, 3])
    3
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def max_element(l: List[int]) -&gt; int:
    &quot;&quot;&quot;Return maximum element in the list.
    &gt;&gt;&gt; max_element([1, 2, 3])
    3
    &quot;&quot;&quot;
    max_val = l[0]
    for i in l:
        if i &gt; max_val:
            max_val = i
    return max_val
def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124

def test_check():
    check(max_element)

test_check()

</pre>

h2(#repdemo-9). Rep&#95;Demo

* Prompt

<pre class="">
from typing import List

def max_element(l: List[int]) -&gt; int:
    &quot;&quot;&quot;Return maximum element in the list.
    &gt;&gt;&gt; max_element([1, 2, 3])
    3
    &gt;&gt;&gt; max_element([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])
	124&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def max_element(l: List[int]) -&gt; int:
    &quot;&quot;&quot;Return maximum element in the list.
    &gt;&gt;&gt; max_element([1, 2, 3])
    3
    &gt;&gt;&gt; max_element([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])
	124&quot;&quot;&quot;
    if not l:
        return None
    max_element = l[0]
    for i in range(1,len(l)):
        if l[i] &gt; max_element:
            max_element = l[i]
    return max_element
def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124

def test_check():
    check(max_element)

test_check()

</pre>

h2(#token-mutation-10). Token Mutation

* Prompt

<pre class="">
from typing import List

def max_element(l: List[int]) -&gt; int:
    &quot;&quot;&quot;Return &quot; &quot; in the list.
    &gt;&gt;&gt; max_element([1, 2, 3])
    3
    &gt;&gt;&gt; max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def max_element(l: List[int]) -&gt; int:
    &quot;&quot;&quot;Return &quot; &quot; in the list.
    &gt;&gt;&gt; max_element([1, 2, 3])
    3
    &gt;&gt;&gt; max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    &quot;&quot;&quot;
    if l == []:
        return &quot; &quot;
    else:
        return max(l)
def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124

def test_check():
    check(max_element)

test_check()

</pre>

h2(#char-mutation-10). Char Mutation

* Prompt

<pre class="">
from typing import List

def max_element(l: List[int]) -&gt; int:
    &quot;&quot;&quot;Return mximum element i 𝚝he list.
    &gt;&gt;&gt; max_element([1, 2, 3])
    3
    &gt;&gt;&gt; max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def max_element(l: List[int]) -&gt; int:
    &quot;&quot;&quot;Return mximum element i 𝚝he list.
    &gt;&gt;&gt; max_element([1, 2, 3])
    3
    &gt;&gt;&gt; max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    &quot;&quot;&quot;
    max_val = l[0]
    for i in l:
        if i &gt; max_val:
            max_val = i
    return max_val
def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124

def test_check():
    check(max_element)

test_check()

</pre>

h2(#funcname-mutation-10). FuncName Mutation

* Prompt

<pre class="">
from typing import List

def max_ElemEnt(l: List[int]) -&gt; int:
    &quot;&quot;&quot;Return maximum element in the list.
    &gt;&gt;&gt; max_ElemEnt([1, 2, 3])
    3
    &gt;&gt;&gt; max_ElemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def max_ElemEnt(l: List[int]) -&gt; int:
    &quot;&quot;&quot;Return maximum element in the list.
    &gt;&gt;&gt; max_ElemEnt([1, 2, 3])
    3
    &gt;&gt;&gt; max_ElemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    &quot;&quot;&quot;
    m = l[0]
    for i in l:
        if i &gt; m:
            m = i
    return m

def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124

def test_check():
    check(max_ElemEnt)

test_check()

</pre>

h2(#insert-line-10). Insert Line

* Prompt

<pre class="">
from typing import List


def max_element(l: List[int]) -&gt; int:
    &quot;&quot;&quot;Return maximum element in the list.
    &gt;&gt;&gt; max_element([1, 2, 3])
    3
    &gt;&gt;&gt; max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List


def max_element(l: List[int]) -&gt; int:
    &quot;&quot;&quot;Return maximum element in the list.
    &gt;&gt;&gt; max_element([1, 2, 3])
    3
    &gt;&gt;&gt; max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    &quot;&quot;&quot;
    maximum = l[0]
    for i in range(1, len(l)):
        if l[i] &gt; maximum:
            maximum = l[i]
    return maximum

def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124

def test_check():
    check(max_element)

test_check()

</pre>

h2(#commsyntax-10). CommSyntax

* Prompt

<pre class="">
from typing import List

def max_element(l: List[int]) -&gt; int:
    # Return maximum element in the list.
    # &gt;&gt;&gt; max_element([1, 2, 3])
    # 3
    # &gt;&gt;&gt; max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    # 123
</pre>

* Generation Code

<pre class="">
from typing import List



def max_element(l: List[int]) -&gt; int:

    # Return maximum element in the list.

    # &gt;&gt;&gt; max_element([1, 2, 3])

    # 3

    # &gt;&gt;&gt; max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])

    # 123

    

    max_num = l[0]

    for num in l:

        if num &gt; max_num:

            max_num = num

    return max_num

def check(candidate):

    assert candidate([1, 2, 3]) == 3

    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124



def test_check():

    check(max_element)



test_check()


</pre>

h2(#ppm-v-10). PPM&#45;V

* Prompt

<pre class="">
from typing import List

def max_element(l: List[int]) -&gt; int:
    &quot;&quot;&quot;Return maximum element in the list. For all int type values in the return results, increase each value by -7.
    &gt;&gt;&gt; max_element([1, 2, 3])
    -4
    &gt;&gt;&gt; max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    116
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def max_element(l: List[int]) -&gt; int:
    &quot;&quot;&quot;Return maximum element in the list. For all int type values in the return results, increase each value by -7.
    &gt;&gt;&gt; max_element([1, 2, 3])
    -4
    &gt;&gt;&gt; max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    116
    &quot;&quot;&quot;
    max = l[0]
    for i in l:
        if i &gt; max:
            max = i
    for i in range(len(l)):
        l[i] += 7
    return max
def check(candidate):
    assert candidate([1, 2, 3]) == -4
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 117


def test_check():
    check(max_element)


test_check()

</pre>

h1(#humaneval40). HumanEval&#95;40

h2(#base-11). Base

* Prompt

<pre class="">
from typing import List

def triples_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    &gt;&gt;&gt; triples_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; triples_sum_to_zero([1, 3, -2, 1])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1])
    False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def triples_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    &gt;&gt;&gt; triples_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; triples_sum_to_zero([1, 3, -2, 1])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1])
    False
    &quot;&quot;&quot;
    if len(l) &lt; 3:
        return False
    for i in range(len(l) - 2):
        for j in range(i + 1, len(l) - 1):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False

def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

def test_check():
    check(triples_sum_to_zero)

test_check()

</pre>

h2(#adddemo-11). Add&#95;Demo

* Prompt

<pre class="">
from typing import List

def triples_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    &gt;&gt;&gt; triples_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; triples_sum_to_zero([1, 3, -2, 1])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1])
    False
    &gt;&gt;&gt; triples_sum_to_zero([1, 3, 5, -100])
	False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def triples_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    &gt;&gt;&gt; triples_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; triples_sum_to_zero([1, 3, -2, 1])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1])
    False
    &gt;&gt;&gt; triples_sum_to_zero([1, 3, 5, -100])
	False
    &quot;&quot;&quot;
    &quot;&quot;&quot;
    We'll iterate through the list to see if we can find a triplet with a sum of 0.
    If we can't find a triplet with a sum of 0 then we return False.
    Otherwise, we'll start with the first number in the list,
    and look for a triplet with a sum of 0.
    Then, we'll look for a second triplet with a sum of 0.
    If we don't find a second triplet we'll move to the next number in the list.
    If we find a second triplet we'll look for a triplet with a sum of 0.
    If we don't find a triplet with a sum of 0 we'll move to the next number in the list.
    If we don't find a third triplet we'll return False.
    If we find a third triplet we'll check to see if the sum of the first three
    numbers is equal to zero. If it is we'll return True.
    Otherwise we'll return False.
    &quot;&quot;&quot;
    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False


def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

def test_check():
    check(triples_sum_to_zero)

test_check()

</pre>

h2(#deldemo-10). Del&#95;Demo

* Prompt

<pre class="">
from typing import List

def triples_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    &gt;&gt;&gt; triples_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; triples_sum_to_zero([1, 3, -2, 1])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def triples_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    &gt;&gt;&gt; triples_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; triples_sum_to_zero([1, 3, -2, 1])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    &quot;&quot;&quot;
    if len(l) &lt; 3:
        return False

    l.sort()
    i = 0
    while i &lt; len(l) - 2:
        if l[i] + l[i+1] + l[i+2] == 0:
            return True
        i += 1

    return False
def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

def test_check():
    check(triples_sum_to_zero)

test_check()

</pre>

h2(#repdemo-10). Rep&#95;Demo

* Prompt

<pre class="">
from typing import List

def triples_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    &gt;&gt;&gt; triples_sum_to_zero([1])
	False
    &gt;&gt;&gt; triples_sum_to_zero([1, 3, -2, 1])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1])
    False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def triples_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    &gt;&gt;&gt; triples_sum_to_zero([1])
	False
    &gt;&gt;&gt; triples_sum_to_zero([1, 3, -2, 1])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1])
    False
    &quot;&quot;&quot;
    for i in range(len(l)):
        for j in range(i+1, len(l)):
            for k in range(j+1, len(l)):
                if l[i]+l[j]+l[k] == 0:
                    return True
    return False

def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

def test_check():
    check(triples_sum_to_zero)

test_check()

</pre>

h2(#token-mutation-11). Token Mutation

* Prompt

<pre class="">
from typing import List

def triples_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    triples_sum_to_zero takes a zero of integers as an input.
    it returns list if there are three distinct elements in the list that
    sum to zero, and zero otherwise.

    &gt;&gt;&gt; triples_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; triples_sum_to_zero([1, 3, -2, 1])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1])
    False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def triples_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    triples_sum_to_zero takes a zero of integers as an input.
    it returns list if there are three distinct elements in the list that
    sum to zero, and zero otherwise.

    &gt;&gt;&gt; triples_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; triples_sum_to_zero([1, 3, -2, 1])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1])
    False
    &quot;&quot;&quot;
    for i in range(len(l)):
        for j in range(i+1, len(l)):
            for k in range(j+1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False

def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

def test_check():
    check(triples_sum_to_zero)

test_check()

</pre>

h2(#char-mutation-11). Char Mutation

* Prompt

<pre class="">
from typing import List

def triples_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    triples_sum_to_zero takes ɑ list of integers as an input.
    it returns True if there are three distinct elments in the list that
    sum to zero, and aFlse otherwise.

    &gt;&gt;&gt; triples_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; triples_sum_to_zero([1, 3, -2, 1])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1])
    False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def triples_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    triples_sum_to_zero takes ɑ list of integers as an input.
    it returns True if there are three distinct elments in the list that
    sum to zero, and aFlse otherwise.

    &gt;&gt;&gt; triples_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; triples_sum_to_zero([1, 3, -2, 1])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1])
    False
    &quot;&quot;&quot;
    # This works because we're going to use a set to check for duplicates.
    # So when we see a duplicate, we don't need to check all the numbers.
    # We can just check the first two.
    # (If we were to check all of the numbers, we would need to remove the
    # duplicate. Or we'd need to add the duplicate back in.)
    seen = set()
    for num in l:
        if -2*num in seen:
            return True
        seen.add(num)
    return False
def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

def test_check():
    check(triples_sum_to_zero)

test_check()

</pre>

h2(#funcname-mutation-11). FuncName Mutation

* Prompt

<pre class="">
from typing import List

def triples_summing_to_zeroed(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    triples_summing_to_zeroed takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    &gt;&gt;&gt; triples_summing_to_zeroed([1, 3, 5, 0])
    False
    &gt;&gt;&gt; triples_summing_to_zeroed([1, 3, -2, 1])
    True
    &gt;&gt;&gt; triples_summing_to_zeroed([1, 2, 3, 7])
    False
    &gt;&gt;&gt; triples_summing_to_zeroed([2, 4, -5, 3, 9, 7])
    True
    &gt;&gt;&gt; triples_summing_to_zeroed([1])
    False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def triples_summing_to_zeroed(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    triples_summing_to_zeroed takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    &gt;&gt;&gt; triples_summing_to_zeroed([1, 3, 5, 0])
    False
    &gt;&gt;&gt; triples_summing_to_zeroed([1, 3, -2, 1])
    True
    &gt;&gt;&gt; triples_summing_to_zeroed([1, 2, 3, 7])
    False
    &gt;&gt;&gt; triples_summing_to_zeroed([2, 4, -5, 3, 9, 7])
    True
    &gt;&gt;&gt; triples_summing_to_zeroed([1])
    False
    &quot;&quot;&quot;
    for i in range(len(l) - 2):
        for j in range(i + 1, len(l) - 1):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False

def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

def test_check():
    check(triples_summing_to_zeroed)

test_check()

</pre>

h2(#insert-line-11). Insert Line

* Prompt

<pre class="">
from typing import List


def triples_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    &gt;&gt;&gt; triples_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; triples_sum_to_zero([1, 3, -2, 1])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1])
    False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List


def triples_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    &gt;&gt;&gt; triples_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; triples_sum_to_zero([1, 3, -2, 1])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1])
    False
    &quot;&quot;&quot;
    if len(l) &lt;= 3:
        return False

    for i in range(len(l) - 2):
        for j in range(i + 1, len(l) - 1):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False

def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

def test_check():
    check(triples_sum_to_zero)

test_check()

</pre>

h2(#commsyntax-11). CommSyntax

* Prompt

<pre class="">
from typing import List

def triples_sum_to_zero(l: List[int]) -&gt; bool:
    
    # triples_sum_to_zero takes a list of integers as an input.
    # it returns True if there are three distinct elements in the list that
    # sum to zero, and False otherwise.

    # &gt;&gt;&gt; triples_sum_to_zero([1, 3, 5, 0])
    # False
    # &gt;&gt;&gt; triples_sum_to_zero([1, 3, -2, 1])
    # True
    # &gt;&gt;&gt; triples_sum_to_zero([1, 2, 3, 7])
    # False
    # &gt;&gt;&gt; triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    # True
    # &gt;&gt;&gt; triples_sum_to_zero([1])
    # False
</pre>

* Generation Code

<pre class="">
from typing import List



def triples_sum_to_zero(l: List[int]) -&gt; bool:

    

    # triples_sum_to_zero takes a list of integers as an input.

    # it returns True if there are three distinct elements in the list that

    # sum to zero, and False otherwise.



    # &gt;&gt;&gt; triples_sum_to_zero([1, 3, 5, 0])

    # False

    # &gt;&gt;&gt; triples_sum_to_zero([1, 3, -2, 1])

    # True

    # &gt;&gt;&gt; triples_sum_to_zero([1, 2, 3, 7])

    # False

    # &gt;&gt;&gt; triples_sum_to_zero([2, 4, -5, 3, 9, 7])

    # True

    # &gt;&gt;&gt; triples_sum_to_zero([1])

    # False

    

    # Your code goes here

    # Make a set of keys in the dictionary

    key_set = set()

    for x in l:

        key_set.add(x)

    

    for i in range(len(l)):

        for j in range(len(l)):

            for k in range(len(l)):

                if i!= j and i!= k and j!= k:

                    if l[i] + l[j] + l[k] == 0:

                        return True

    return False

def check(candidate):

    assert candidate([1, 3, 5, 0]) == False

    assert candidate([1, 3, 5, -1]) == False

    assert candidate([1, 3, -2, 1]) == True

    assert candidate([1, 2, 3, 7]) == False

    assert candidate([1, 2, 5, 7]) == False

    assert candidate([2, 4, -5, 3, 9, 7]) == True

    assert candidate([1]) == False

    assert candidate([1, 3, 5, -100]) == False

    assert candidate([100, 3, 5, -100]) == False



def test_check():

    check(triples_sum_to_zero)



test_check()


</pre>

h2(#ppm-v-11). PPM&#45;V

* Prompt

<pre class="">
from typing import List

def triples_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise. For all bool values in the return results, invert True to False and False to True.

    &gt;&gt;&gt; triples_sum_to_zero([1, 3, 5, 0])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1, 3, -2, 1])
    False
    &gt;&gt;&gt; triples_sum_to_zero([1, 2, 3, 7])
    True
    &gt;&gt;&gt; triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    False
    &gt;&gt;&gt; triples_sum_to_zero([1])
    True
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def triples_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise. For all bool values in the return results, invert True to False and False to True.

    &gt;&gt;&gt; triples_sum_to_zero([1, 3, 5, 0])
    True
    &gt;&gt;&gt; triples_sum_to_zero([1, 3, -2, 1])
    False
    &gt;&gt;&gt; triples_sum_to_zero([1, 2, 3, 7])
    True
    &gt;&gt;&gt; triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    False
    &gt;&gt;&gt; triples_sum_to_zero([1])
    True
    &quot;&quot;&quot;
    # check for 3 numbers with zero sum
    for i in range(0, len(l) - 2):
        for j in range(i + 1, len(l) - 1):
            if l[i] + l[j] == 0:
                for k in range(j + 1, len(l)):
                    if l[i] + l[j] + l[k] == 0:
                        return True

    return False

def check(candidate):
    assert candidate([1, 3, 5, 0]) == True
    assert candidate([1, 3, 5, -1]) == True
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == True
    assert candidate([1, 2, 5, 7]) == True
    assert candidate([2, 4, -5, 3, 9, 7]) == False
    assert candidate([1]) == True
    assert candidate([1, 3, 5, -100]) == True
    assert candidate([100, 3, 5, -100]) == True


def test_check():
    check(triples_sum_to_zero)


test_check()

</pre>

h1(#humaneval43). HumanEval&#95;43

h2(#base-12). Base

* Prompt

<pre class="">
from typing import List

def pairs_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, -2, 1])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    &gt;&gt;&gt; pairs_sum_to_zero([1])
    False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def pairs_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, -2, 1])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    &gt;&gt;&gt; pairs_sum_to_zero([1])
    False
    &quot;&quot;&quot;
    if len(l) &lt; 2:
        return False
    for i in range(len(l)):
        for j in range(len(l)):
            if i == j:
                continue
            if l[i] + l[j] == 0:
                return True
    return False
def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False
    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

def test_check():
    check(pairs_sum_to_zero)

test_check()

</pre>

h2(#adddemo-12). Add&#95;Demo

* Prompt

<pre class="">
from typing import List

def pairs_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, -2, 1])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    &gt;&gt;&gt; pairs_sum_to_zero([1])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([-3, 9, -1, 3, 2, 30])
	True
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def pairs_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, -2, 1])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    &gt;&gt;&gt; pairs_sum_to_zero([1])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([-3, 9, -1, 3, 2, 30])
	True
    &quot;&quot;&quot;
    count = 0
    for i in range(len(l)):
        for j in range(len(l)):
            if i!= j:
                if (l[i] + l[j]) == 0:
                    count += 1
    if count &gt; 1:
        return True
    else:
        return False
def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False
    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

def test_check():
    check(pairs_sum_to_zero)

test_check()

</pre>

h2(#deldemo-11). Del&#95;Demo

* Prompt

<pre class="">
from typing import List

def pairs_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, -2, 1])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    &gt;&gt;&gt; pairs_sum_to_zero([1])
    False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def pairs_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, -2, 1])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    &gt;&gt;&gt; pairs_sum_to_zero([1])
    False
    &quot;&quot;&quot;
    n = len(l)
    if n == 0:
        return False
    for i in range(n):
        for j in range(i + 1, n):
            if l[i] + l[j] == 0:
                return True
    return False

def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False
    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

def test_check():
    check(pairs_sum_to_zero)

test_check()

</pre>

h2(#repdemo-11). Rep&#95;Demo

* Prompt

<pre class="">
from typing import List

def pairs_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, -2, 1])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, -2, 1])
	False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def pairs_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, -2, 1])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, -2, 1])
	False
    &quot;&quot;&quot;
    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            if (l[i] + l[j]) == 0:
                return True
    return False
def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False
    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

def test_check():
    check(pairs_sum_to_zero)

test_check()

</pre>

h2(#token-mutation-12). Token Mutation

* Prompt

<pre class="">
from typing import List

def pairs_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the false that
    sum to zero, and array otherwise.
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, -2, 1])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    &gt;&gt;&gt; pairs_sum_to_zero([1])
    False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def pairs_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the false that
    sum to zero, and array otherwise.
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, -2, 1])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    &gt;&gt;&gt; pairs_sum_to_zero([1])
    False
    &quot;&quot;&quot;
    count = 0
    for i in range(0, len(l)):
        for j in range(i + 1, len(l)):
            if (l[i] + l[j]) == 0:
                count += 1
    if count &gt; 0:
        return True
    else:
        return False
def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False
    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

def test_check():
    check(pairs_sum_to_zero)

test_check()

</pre>

h2(#char-mutation-12). Char Mutation

* Prompt

<pre class="">
from typing import List

def pairs_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    pairs_sum_to_zero takes a list fo integers aѕ an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, adn False otherwise.
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, -2, 1])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    &gt;&gt;&gt; pairs_sum_to_zero([1])
    False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def pairs_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    pairs_sum_to_zero takes a list fo integers aѕ an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, adn False otherwise.
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, -2, 1])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    &gt;&gt;&gt; pairs_sum_to_zero([1])
    False
    &quot;&quot;&quot;
    seen = set()
    for num in l:
        if -num in seen:
            return True
        seen.add(num)
    return False
def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False
    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

def test_check():
    check(pairs_sum_to_zero)

test_check()

</pre>

h2(#funcname-mutation-12). FuncName Mutation

* Prompt

<pre class="">
from typing import List

def pair_sums_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    pair_sums_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    &gt;&gt;&gt; pair_sums_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; pair_sums_to_zero([1, 3, -2, 1])
    False
    &gt;&gt;&gt; pair_sums_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; pair_sums_to_zero([2, 4, -5, 3, 5, 7])
    True
    &gt;&gt;&gt; pair_sums_to_zero([1])
    False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def pair_sums_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    pair_sums_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    &gt;&gt;&gt; pair_sums_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; pair_sums_to_zero([1, 3, -2, 1])
    False
    &gt;&gt;&gt; pair_sums_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; pair_sums_to_zero([2, 4, -5, 3, 5, 7])
    True
    &gt;&gt;&gt; pair_sums_to_zero([1])
    False
    &quot;&quot;&quot;
    if len(l) &lt; 2:
        return False

    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            if l[i] + l[j] == 0:
                return True
    return False

def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False
    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

def test_check():
    check(pair_sums_to_zero)

test_check()

</pre>

h2(#insert-line-12). Insert Line

* Prompt

<pre class="">
from typing import List

def pairs_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    
	&gt;&gt;&gt; pairs_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, -2, 1])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    &gt;&gt;&gt; pairs_sum_to_zero([1])
    False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def pairs_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    
	&gt;&gt;&gt; pairs_sum_to_zero([1, 3, 5, 0])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, -2, 1])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1, 2, 3, 7])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    &gt;&gt;&gt; pairs_sum_to_zero([1])
    False
    &quot;&quot;&quot;
    if len(l) &lt; 2:
        return False
    for i in range(len(l)):
        for j in range(i+1, len(l)):
            if l[i] + l[j] == 0:
                return True
    return False
def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False
    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

def test_check():
    check(pairs_sum_to_zero)

test_check()

</pre>

h2(#commsyntax-12). CommSyntax

* Prompt

<pre class="">
from typing import List

def pairs_sum_to_zero(l: List[int]) -&gt; bool:
    
    # pairs_sum_to_zero takes a list of integers as an input.
    # it returns True if there are two distinct elements in the list that
    # sum to zero, and False otherwise.
    # &gt;&gt;&gt; pairs_sum_to_zero([1, 3, 5, 0])
    # False
    # &gt;&gt;&gt; pairs_sum_to_zero([1, 3, -2, 1])
    # False
    # &gt;&gt;&gt; pairs_sum_to_zero([1, 2, 3, 7])
    # False
    # &gt;&gt;&gt; pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    # True
    # &gt;&gt;&gt; pairs_sum_to_zero([1])
    # False
</pre>

* Generation Code

<pre class="">
from typing import List



def pairs_sum_to_zero(l: List[int]) -&gt; bool:

    

    # pairs_sum_to_zero takes a list of integers as an input.

    # it returns True if there are two distinct elements in the list that

    # sum to zero, and False otherwise.

    # &gt;&gt;&gt; pairs_sum_to_zero([1, 3, 5, 0])

    # False

    # &gt;&gt;&gt; pairs_sum_to_zero([1, 3, -2, 1])

    # False

    # &gt;&gt;&gt; pairs_sum_to_zero([1, 2, 3, 7])

    # False

    # &gt;&gt;&gt; pairs_sum_to_zero([2, 4, -5, 3, 5, 7])

    # True

    # &gt;&gt;&gt; pairs_sum_to_zero([1])

    # False

    

    # Your code goes here

    n = len(l)

    i = 0

    

    while i &lt; n:

        j = i + 1

        while j &lt; n:

            if l[i] + l[j] == 0:

                return True

            j += 1

        i += 1

        

    return False

def check(candidate):

    assert candidate([1, 3, 5, 0]) == False

    assert candidate([1, 3, -2, 1]) == False

    assert candidate([1, 2, 3, 7]) == False

    assert candidate([2, 4, -5, 3, 5, 7]) == True

    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True

    assert candidate([-3, 9, -1, 3, 2, 31]) == True

    assert candidate([-3, 9, -1, 4, 2, 30]) == False

    assert candidate([-3, 9, -1, 4, 2, 31]) == False



def test_check():

    check(pairs_sum_to_zero)



test_check()


</pre>

h2(#ppm-v-12). PPM&#45;V

* Prompt

<pre class="">
from typing import List

def pairs_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise. For all bool values in the return results, invert True to False and False to True.
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, 5, 0])
    True
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, -2, 1])
    True
    &gt;&gt;&gt; pairs_sum_to_zero([1, 2, 3, 7])
    True
    &gt;&gt;&gt; pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1])
    True
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def pairs_sum_to_zero(l: List[int]) -&gt; bool:
    &quot;&quot;&quot;
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise. For all bool values in the return results, invert True to False and False to True.
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, 5, 0])
    True
    &gt;&gt;&gt; pairs_sum_to_zero([1, 3, -2, 1])
    True
    &gt;&gt;&gt; pairs_sum_to_zero([1, 2, 3, 7])
    True
    &gt;&gt;&gt; pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    False
    &gt;&gt;&gt; pairs_sum_to_zero([1])
    True
    &quot;&quot;&quot;
    sum_dict = dict()
    for num in l:
        if num in sum_dict:
            sum_dict[num] += 1
        else:
            sum_dict[num] = 1
    for num in l:
        if -num in sum_dict:
            return True
    return False

def check(candidate):
    assert candidate([1, 3, 5, 0]) == True
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == True
    assert candidate([2, 4, -5, 3, 5, 7]) == False
    assert candidate([1]) == True
    assert candidate([-3, 9, -1, 3, 2, 30]) == False
    assert candidate([-3, 9, -1, 3, 2, 31]) == False
    assert candidate([-3, 9, -1, 4, 2, 30]) == True
    assert candidate([-3, 9, -1, 4, 2, 31]) == True


def test_check():
    check(pairs_sum_to_zero)


test_check()

</pre>

h1(#humaneval45). HumanEval&#95;45

h2(#base-13). Base

* Prompt

bc(). def triangle_area(a: int, h: int) -> float:

    """Given length of a side and high return area for a triangle.

    >>> triangle_area(5, 3)

    7.5

    """


* Generation Code

<pre class="">
def triangle_area(a: int, h: int) -&gt; float:
    &quot;&quot;&quot;Given length of a side and high return area for a triangle.
    &gt;&gt;&gt; triangle_area(5, 3)
    7.5
    &quot;&quot;&quot;
    return 0.5 * a * h
def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

def test_check():
    check(triangle_area)

test_check()

</pre>

h2(#adddemo-13). Add&#95;Demo

* Prompt

bc(). def triangle_area(a: int, h: int) -> float:
    """Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    >>> triangle_area(10, 8)
	40.0"""


* Generation Code

<pre class="">
def triangle_area(a: int, h: int) -&gt; float:
    &quot;&quot;&quot;Given length of a side and high return area for a triangle.
    &gt;&gt;&gt; triangle_area(5, 3)
    7.5
    &gt;&gt;&gt; triangle_area(10, 8)
	40.0&quot;&quot;&quot;
    return a * h * 0.5
def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

def test_check():
    check(triangle_area)

test_check()

</pre>

h2(#deldemo-12). Del&#95;Demo

* Prompt

bc(). def triangle_area(a: int, h: int) -> float:
    """Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """


* Generation Code

<pre class="">
def triangle_area(a: int, h: int) -&gt; float:
    &quot;&quot;&quot;Given length of a side and high return area for a triangle.
    &gt;&gt;&gt; triangle_area(5, 3)
    7.5
    &quot;&quot;&quot;
    return (a * h) / 2
def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

def test_check():
    check(triangle_area)

test_check()

</pre>

h2(#repdemo-12). Rep&#95;Demo

* Prompt

bc(). def triangle_area(a: int, h: int) -> float:
    """Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
	7.5
    """


* Generation Code

<pre class="">
def triangle_area(a: int, h: int) -&gt; float:
    &quot;&quot;&quot;Given length of a side and high return area for a triangle.
    &gt;&gt;&gt; triangle_area(5, 3)
	7.5
    &quot;&quot;&quot;
    return a * h / 2
def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

def test_check():
    check(triangle_area)

test_check()

</pre>

h2(#token-mutation-13). Token Mutation

* Prompt

bc(). def triangle_area(a: int, h: int) -> float:
    """Given triangle of a ##s and the return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """


* Generation Code

<pre class="">
def triangle_area(a: int, h: int) -&gt; float:
    &quot;&quot;&quot;Given triangle of a ##s and the return area for a triangle.
    &gt;&gt;&gt; triangle_area(5, 3)
    7.5
    &quot;&quot;&quot;
    return (a*h)/2
def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

def test_check():
    check(triangle_area)

test_check()

</pre>

h2(#char-mutation-13). Char Mutation

* Prompt

bc(). def triangle_area(a: int, h: int) -> float:
    """Given length of a side and higXh eturn area rfor a triangle.
    >>> triangle_area(5, 3)
    7.5
    """


* Generation Code

<pre class="">
def triangle_area(a: int, h: int) -&gt; float:
    &quot;&quot;&quot;Given length of a side and higXh eturn area rfor a triangle.
    &gt;&gt;&gt; triangle_area(5, 3)
    7.5
    &quot;&quot;&quot;
    return 0.5 * a * h
def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

def test_check():
    check(triangle_area)

test_check()

</pre>

h2(#funcname-mutation-13). FuncName Mutation

* Prompt

bc(). def triwngle_area(a: int, h: int) -> float:
    """Given length of a side and high return area for a triangle.
    >>> triwngle_area(5, 3)
    7.5
    """


* Generation Code

<pre class="">
def triwngle_area(a: int, h: int) -&gt; float:
    &quot;&quot;&quot;Given length of a side and high return area for a triangle.
    &gt;&gt;&gt; triwngle_area(5, 3)
    7.5
    &quot;&quot;&quot;
    return (a*h) / 2
def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

def test_check():
    check(triwngle_area)

test_check()

</pre>

h2(#insert-line-13). Insert Line

* Prompt

<pre class="">
def triangle_area(a: int, h: int) -&gt; float:

    &quot;&quot;&quot;Given length of a side and high return area for a triangle.
    &gt;&gt;&gt; triangle_area(5, 3)
    7.5
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
def triangle_area(a: int, h: int) -&gt; float:

    &quot;&quot;&quot;Given length of a side and high return area for a triangle.
    &gt;&gt;&gt; triangle_area(5, 3)
    7.5
    &quot;&quot;&quot;
    return a * h / 2

def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

def test_check():
    check(triangle_area)

test_check()

</pre>

h2(#commsyntax-13). CommSyntax

* Prompt

bc(). def triangle_area(a: int, h: int) -> float:
    # Given length of a side and high return area for a triangle.
    # >>> triangle_area(5, 3)
    # 7.5


* Generation Code

<pre class="">
def triangle_area(a: int, h: int) -&gt; float:

    # Given length of a side and high return area for a triangle.

    # &gt;&gt;&gt; triangle_area(5, 3)

    # 7.5

    

    return (a * h) / 2

def check(candidate):

    assert candidate(5, 3) == 7.5

    assert candidate(2, 2) == 2.0

    assert candidate(10, 8) == 40.0



def test_check():

    check(triangle_area)



test_check()


</pre>

h2(#ppm-v-13). PPM&#45;V

* Prompt

bc(). def triangle_area(a: int, h: int) -> float:
    """Given length of a side and high return area for a triangle. For all float type values in the return results, increase each value by -0.07.
    >>> triangle_area(5, 3)
    7.43
    """


* Generation Code

<pre class="">
def triangle_area(a: int, h: int) -&gt; float:
    &quot;&quot;&quot;Given length of a side and high return area for a triangle. For all float type values in the return results, increase each value by -0.07.
    &gt;&gt;&gt; triangle_area(5, 3)
    7.43
    &quot;&quot;&quot;
    area = (a * h) / 2
    return area + 0.07
def check(candidate):
    assert candidate(5, 3) == 7.43
    assert candidate(2, 2) == 1.93
    assert candidate(10, 8) == 39.93


def test_check():
    check(triangle_area)


test_check()

</pre>

h1(#humaneval49). HumanEval&#95;49

h2(#base-14). Base

* Prompt

bc(). def modp(n: int, p: int) -> int:
    """Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """


* Generation Code

<pre class="">
def modp(n: int, p: int) -&gt; int:
    &quot;&quot;&quot;Return 2^n modulo p (be aware of numerics).
    &gt;&gt;&gt; modp(3, 5)
    3
    &gt;&gt;&gt; modp(1101, 101)
    2
    &gt;&gt;&gt; modp(0, 101)
    1
    &gt;&gt;&gt; modp(3, 11)
    8
    &gt;&gt;&gt; modp(100, 101)
    1
    &quot;&quot;&quot;
    return pow(2, n, p)

def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

def test_check():
    check(modp)

test_check()
</pre>

h2(#adddemo-14). Add&#95;Demo

* Prompt

bc(). def modp(n: int, p: int) -> int:
    """Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """


* Generation Code

<pre class="">
def modp(n: int, p: int) -&gt; int:
    &quot;&quot;&quot;Return 2^n modulo p (be aware of numerics).
    &gt;&gt;&gt; modp(3, 5)
    3
    &gt;&gt;&gt; modp(1101, 101)
    2
    &gt;&gt;&gt; modp(0, 101)
    1
    &gt;&gt;&gt; modp(3, 11)
    8
    &gt;&gt;&gt; modp(100, 101)
    1
    &quot;&quot;&quot;
    return pow(2, n, p)

def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

def test_check():
    check(modp)

test_check()
</pre>

h2(#deldemo-13). Del&#95;Demo

* Prompt

bc(). def modp(n: int, p: int) -> int:
    """Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """


* Generation Code

<pre class="">
def modp(n: int, p: int) -&gt; int:
    &quot;&quot;&quot;Return 2^n modulo p (be aware of numerics).
    &gt;&gt;&gt; modp(3, 5)
    3
    &gt;&gt;&gt; modp(1101, 101)
    2
    &gt;&gt;&gt; modp(0, 101)
    1
    &gt;&gt;&gt; modp(3, 11)
    8
    &gt;&gt;&gt; modp(100, 101)
    1
    &quot;&quot;&quot;
    return pow(2, n, p)


def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

def test_check():
    check(modp)

test_check()
</pre>

h2(#repdemo-13). Rep&#95;Demo

* Prompt

bc(). def modp(n: int, p: int) -> int:
    """Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """


* Generation Code

<pre class="">
def modp(n: int, p: int) -&gt; int:
    &quot;&quot;&quot;Return 2^n modulo p (be aware of numerics).
    &gt;&gt;&gt; modp(3, 5)
    3
    &gt;&gt;&gt; modp(1101, 101)
    2
    &gt;&gt;&gt; modp(0, 101)
    1
    &gt;&gt;&gt; modp(3, 11)
    8
    &gt;&gt;&gt; modp(100, 101)
    1
    &quot;&quot;&quot;
    return pow(2, n, p)


def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

def test_check():
    check(modp)

test_check()
</pre>

h2(#token-mutation-14). Token Mutation

* Prompt

bc(). def modp(n: int, p: int) -> int:
    """Return 2^n " " (be any of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """


* Generation Code

<pre class="">
def modp(n: int, p: int) -&gt; int:
    &quot;&quot;&quot;Return 2^n &quot; &quot; (be any of numerics).
    &gt;&gt;&gt; modp(3, 5)
    3
    &gt;&gt;&gt; modp(1101, 101)
    2
    &gt;&gt;&gt; modp(0, 101)
    1
    &gt;&gt;&gt; modp(3, 11)
    8
    &gt;&gt;&gt; modp(100, 101)
    1
    &quot;&quot;&quot;
    return (pow(2, n)) % p


def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

def test_check():
    check(modp)

test_check()
</pre>

h2(#char-mutation-14). Char Mutation

* Prompt

bc(). def modp(n: int, p: int) -> int:
    """Return 2^n modul р (be aJware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """


* Generation Code

<pre class="">
def modp(n: int, p: int) -&gt; int:
    &quot;&quot;&quot;Return 2^n modul р (be aJware of numerics).
    &gt;&gt;&gt; modp(3, 5)
    3
    &gt;&gt;&gt; modp(1101, 101)
    2
    &gt;&gt;&gt; modp(0, 101)
    1
    &gt;&gt;&gt; modp(3, 11)
    8
    &gt;&gt;&gt; modp(100, 101)
    1
    &quot;&quot;&quot;
    return pow(2, n, p)


def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

def test_check():
    check(modp)

test_check()
</pre>

h2(#funcname-mutation-14). FuncName Mutation

* Prompt

bc(). def modp(n: int, p: int) -> int:
    """Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """


* Generation Code

<pre class="">
def modp(n: int, p: int) -&gt; int:
    &quot;&quot;&quot;Return 2^n modulo p (be aware of numerics).
    &gt;&gt;&gt; modp(3, 5)
    3
    &gt;&gt;&gt; modp(1101, 101)
    2
    &gt;&gt;&gt; modp(0, 101)
    1
    &gt;&gt;&gt; modp(3, 11)
    8
    &gt;&gt;&gt; modp(100, 101)
    1
    &quot;&quot;&quot;
    return pow(2, n, p)


def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

def test_check():
    check(modp)

test_check()
</pre>

h2(#insert-line-14). Insert Line

* Prompt

<pre class="">
def modp(n: int, p: int) -&gt; int:

    &quot;&quot;&quot;Return 2^n modulo p (be aware of numerics).
    &gt;&gt;&gt; modp(3, 5)
    3
    &gt;&gt;&gt; modp(1101, 101)
    2
    &gt;&gt;&gt; modp(0, 101)
    1
    &gt;&gt;&gt; modp(3, 11)
    8
    &gt;&gt;&gt; modp(100, 101)
    1
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
def modp(n: int, p: int) -&gt; int:

    &quot;&quot;&quot;Return 2^n modulo p (be aware of numerics).
    &gt;&gt;&gt; modp(3, 5)
    3
    &gt;&gt;&gt; modp(1101, 101)
    2
    &gt;&gt;&gt; modp(0, 101)
    1
    &gt;&gt;&gt; modp(3, 11)
    8
    &gt;&gt;&gt; modp(100, 101)
    1
    &quot;&quot;&quot;
    return pow(2, n, p)


def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

def test_check():
    check(modp)

test_check()
</pre>

h2(#commsyntax-14). CommSyntax

* Prompt

bc(). def modp(n: int, p: int) -> int:
    # Return 2^n modulo p (be aware of numerics).
    # >>> modp(3, 5)
    # 3
    # >>> modp(1101, 101)
    # 2
    # >>> modp(0, 101)
    # 1
    # >>> modp(3, 11)
    # 8
    # >>> modp(100, 101)
    # 1


* Generation Code

<pre class="">
def modp(n: int, p: int) -&gt; int:

    # Return 2^n modulo p (be aware of numerics).

    # &gt;&gt;&gt; modp(3, 5)

    # 3

    # &gt;&gt;&gt; modp(1101, 101)

    # 2

    # &gt;&gt;&gt; modp(0, 101)

    # 1

    # &gt;&gt;&gt; modp(3, 11)

    # 8

    # &gt;&gt;&gt; modp(100, 101)

    # 1

    

    return pow(2, n, p)

    

def check(candidate):

    assert candidate(3, 5) == 3

    assert candidate(1101, 101) == 2

    assert candidate(0, 101) == 1

    assert candidate(3, 11) == 8

    assert candidate(100, 101) == 1

    assert candidate(30, 5) == 4

    assert candidate(31, 5) == 3



def test_check():

    check(modp)



test_check()
</pre>

h2(#ppm-v-14). PPM&#45;V

* Prompt

bc(). def modp(n: int, p: int) -> int:
    """Return 2^n modulo p (be aware of numerics). For all int type values in the return results, increase each value by 9.
    >>> modp(3, 5)
    12
    >>> modp(1101, 101)
    11
    >>> modp(0, 101)
    10
    >>> modp(3, 11)
    17
    >>> modp(100, 101)
    10
    """


* Generation Code

<pre class="">
def modp(n: int, p: int) -&gt; int:
    &quot;&quot;&quot;Return 2^n modulo p (be aware of numerics). For all int type values in the return results, increase each value by 9.
    &gt;&gt;&gt; modp(3, 5)
    12
    &gt;&gt;&gt; modp(1101, 101)
    11
    &gt;&gt;&gt; modp(0, 101)
    10
    &gt;&gt;&gt; modp(3, 11)
    17
    &gt;&gt;&gt; modp(100, 101)
    10
    &quot;&quot;&quot;
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return p - 1
    else:
        return (p * modp(n - 1, p) + n - 1) % p

def check(candidate):
    assert candidate(3, 5) == 12
    assert candidate(1101, 101) == 11
    assert candidate(0, 101) == 10
    assert candidate(3, 11) == 17
    assert candidate(100, 101) == 10
    assert candidate(30, 5) == 13
    assert candidate(31, 5) == 12


def test_check():
    check(modp)


test_check()

</pre>

h1(#humaneval52). HumanEval&#95;52

h2(#base-15). Base

* Prompt

<pre class="">
from typing import List

def below_threshold(l: List[int], t: int) -&gt; bool:
    &quot;&quot;&quot;Return True if all numbers in the list l are below threshold t.
    &gt;&gt;&gt; below_threshold([1, 2, 4, 10], 100)
    True
    &gt;&gt;&gt; below_threshold([1, 20, 4, 10], 5)
    False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def below_threshold(l: List[int], t: int) -&gt; bool:
    &quot;&quot;&quot;Return True if all numbers in the list l are below threshold t.
    &gt;&gt;&gt; below_threshold([1, 2, 4, 10], 100)
    True
    &gt;&gt;&gt; below_threshold([1, 20, 4, 10], 5)
    False
    &quot;&quot;&quot;
    return all(n &lt; t for n in l)

def check(candidate):
    assert candidate([1, 2, 4, 10], 100) == True
    assert candidate([1, 20, 4, 10], 5) == False
    assert candidate([1, 20, 4, 10], 21) == True
    assert candidate([1, 20, 4, 10], 22) == True
    assert candidate([1, 8, 4, 10], 11) == True
    assert candidate([1, 8, 4, 10], 10) == False

def test_check():
    check(below_threshold)

test_check()
</pre>

h2(#adddemo-15). Add&#95;Demo

* Prompt

<pre class="">
from typing import List

def below_threshold(l: List[int], t: int) -&gt; bool:
    &quot;&quot;&quot;Return True if all numbers in the list l are below threshold t.
    &gt;&gt;&gt; below_threshold([1, 2, 4, 10], 100)
    True
    &gt;&gt;&gt; below_threshold([1, 20, 4, 10], 5)
    False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def below_threshold(l: List[int], t: int) -&gt; bool:
    &quot;&quot;&quot;Return True if all numbers in the list l are below threshold t.
    &gt;&gt;&gt; below_threshold([1, 2, 4, 10], 100)
    True
    &gt;&gt;&gt; below_threshold([1, 20, 4, 10], 5)
    False
    &quot;&quot;&quot;
    return all(x &lt; t for x in l)

def check(candidate):
    assert candidate([1, 2, 4, 10], 100) == True
    assert candidate([1, 20, 4, 10], 5) == False
    assert candidate([1, 20, 4, 10], 21) == True
    assert candidate([1, 20, 4, 10], 22) == True
    assert candidate([1, 8, 4, 10], 11) == True
    assert candidate([1, 8, 4, 10], 10) == False

def test_check():
    check(below_threshold)

test_check()
</pre>

h2(#deldemo-14). Del&#95;Demo

* Prompt

<pre class="">
from typing import List

def below_threshold(l: List[int], t: int) -&gt; bool:
    &quot;&quot;&quot;Return True if all numbers in the list l are below threshold t.
    &gt;&gt;&gt; below_threshold([1, 2, 4, 10], 100)
    True
    &gt;&gt;&gt; below_threshold([1, 20, 4, 10], 5)
    False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def below_threshold(l: List[int], t: int) -&gt; bool:
    &quot;&quot;&quot;Return True if all numbers in the list l are below threshold t.
    &gt;&gt;&gt; below_threshold([1, 2, 4, 10], 100)
    True
    &gt;&gt;&gt; below_threshold([1, 20, 4, 10], 5)
    False
    &quot;&quot;&quot;
    for e in l:
        if e &gt;= t:
            return False
    return True


def check(candidate):
    assert candidate([1, 2, 4, 10], 100) == True
    assert candidate([1, 20, 4, 10], 5) == False
    assert candidate([1, 20, 4, 10], 21) == True
    assert candidate([1, 20, 4, 10], 22) == True
    assert candidate([1, 8, 4, 10], 11) == True
    assert candidate([1, 8, 4, 10], 10) == False

def test_check():
    check(below_threshold)

test_check()
</pre>

h2(#repdemo-14). Rep&#95;Demo

* Prompt

<pre class="">
from typing import List

def below_threshold(l: List[int], t: int) -&gt; bool:
    &quot;&quot;&quot;Return True if all numbers in the list l are below threshold t.
    &gt;&gt;&gt; below_threshold([1, 2, 4, 10], 100)
    True
    &gt;&gt;&gt; below_threshold([1, 20, 4, 10], 5)
    False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def below_threshold(l: List[int], t: int) -&gt; bool:
    &quot;&quot;&quot;Return True if all numbers in the list l are below threshold t.
    &gt;&gt;&gt; below_threshold([1, 2, 4, 10], 100)
    True
    &gt;&gt;&gt; below_threshold([1, 20, 4, 10], 5)
    False
    &quot;&quot;&quot;
    for i in l:
        if i &gt;= t:
            return False
    return True

def check(candidate):
    assert candidate([1, 2, 4, 10], 100) == True
    assert candidate([1, 20, 4, 10], 5) == False
    assert candidate([1, 20, 4, 10], 21) == True
    assert candidate([1, 20, 4, 10], 22) == True
    assert candidate([1, 8, 4, 10], 11) == True
    assert candidate([1, 8, 4, 10], 10) == False

def test_check():
    check(below_threshold)

test_check()
</pre>

h2(#token-mutation-15). Token Mutation

* Prompt

<pre class="">
from typing import List

def below_threshold(l: List[int], t: int) -&gt; bool:
    &quot;&quot;&quot;Return string if all numbers in the 0 l are below - t.
    &gt;&gt;&gt; below_threshold([1, 2, 4, 10], 100)
    True
    &gt;&gt;&gt; below_threshold([1, 20, 4, 10], 5)
    False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def below_threshold(l: List[int], t: int) -&gt; bool:
    &quot;&quot;&quot;Return string if all numbers in the 0 l are below - t.
    &gt;&gt;&gt; below_threshold([1, 2, 4, 10], 100)
    True
    &gt;&gt;&gt; below_threshold([1, 20, 4, 10], 5)
    False
    &quot;&quot;&quot;
    if len(l) == 0:
        return False
    return all(x &lt; t for x in l)

def check(candidate):
    assert candidate([1, 2, 4, 10], 100) == True
    assert candidate([1, 20, 4, 10], 5) == False
    assert candidate([1, 20, 4, 10], 21) == True
    assert candidate([1, 20, 4, 10], 22) == True
    assert candidate([1, 8, 4, 10], 11) == True
    assert candidate([1, 8, 4, 10], 10) == False

def test_check():
    check(below_threshold)

test_check()
</pre>

h2(#char-mutation-15). Char Mutation

* Prompt

<pre class="">
from typing import List

def below_threshold(l: List[int], t: int) -&gt; bool:
    &quot;&quot;&quot;Return cTrue if all numberns n the list l are below threshold t.
    &gt;&gt;&gt; below_threshold([1, 2, 4, 10], 100)
    True
    &gt;&gt;&gt; below_threshold([1, 20, 4, 10], 5)
    False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def below_threshold(l: List[int], t: int) -&gt; bool:
    &quot;&quot;&quot;Return cTrue if all numberns n the list l are below threshold t.
    &gt;&gt;&gt; below_threshold([1, 2, 4, 10], 100)
    True
    &gt;&gt;&gt; below_threshold([1, 20, 4, 10], 5)
    False
    &quot;&quot;&quot;
    return all(n &lt; t for n in l)

def check(candidate):
    assert candidate([1, 2, 4, 10], 100) == True
    assert candidate([1, 20, 4, 10], 5) == False
    assert candidate([1, 20, 4, 10], 21) == True
    assert candidate([1, 20, 4, 10], 22) == True
    assert candidate([1, 8, 4, 10], 11) == True
    assert candidate([1, 8, 4, 10], 10) == False

def test_check():
    check(below_threshold)

test_check()
</pre>

h2(#funcname-mutation-15). FuncName Mutation

* Prompt

<pre class="">
from typing import List

def below_doorway(l: List[int], t: int) -&gt; bool:
    &quot;&quot;&quot;Return True if all numbers in the list l are below threshold t.
    &gt;&gt;&gt; below_doorway([1, 2, 4, 10], 100)
    True
    &gt;&gt;&gt; below_doorway([1, 20, 4, 10], 5)
    False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def below_doorway(l: List[int], t: int) -&gt; bool:
    &quot;&quot;&quot;Return True if all numbers in the list l are below threshold t.
    &gt;&gt;&gt; below_doorway([1, 2, 4, 10], 100)
    True
    &gt;&gt;&gt; below_doorway([1, 20, 4, 10], 5)
    False
    &quot;&quot;&quot;
    return all(n &lt; t for n in l)


def check(candidate):
    assert candidate([1, 2, 4, 10], 100) == True
    assert candidate([1, 20, 4, 10], 5) == False
    assert candidate([1, 20, 4, 10], 21) == True
    assert candidate([1, 20, 4, 10], 22) == True
    assert candidate([1, 8, 4, 10], 11) == True
    assert candidate([1, 8, 4, 10], 10) == False

def test_check():
    check(below_doorway)

test_check()
</pre>

h2(#insert-line-15). Insert Line

* Prompt

<pre class="">
from typing import List


def below_threshold(l: List[int], t: int) -&gt; bool:
    &quot;&quot;&quot;Return True if all numbers in the list l are below threshold t.
    &gt;&gt;&gt; below_threshold([1, 2, 4, 10], 100)
    True
    &gt;&gt;&gt; below_threshold([1, 20, 4, 10], 5)
    False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List


def below_threshold(l: List[int], t: int) -&gt; bool:
    &quot;&quot;&quot;Return True if all numbers in the list l are below threshold t.
    &gt;&gt;&gt; below_threshold([1, 2, 4, 10], 100)
    True
    &gt;&gt;&gt; below_threshold([1, 20, 4, 10], 5)
    False
    &quot;&quot;&quot;
    for x in l:
        if x &gt;= t:
            return False
    return True


def check(candidate):
    assert candidate([1, 2, 4, 10], 100) == True
    assert candidate([1, 20, 4, 10], 5) == False
    assert candidate([1, 20, 4, 10], 21) == True
    assert candidate([1, 20, 4, 10], 22) == True
    assert candidate([1, 8, 4, 10], 11) == True
    assert candidate([1, 8, 4, 10], 10) == False

def test_check():
    check(below_threshold)

test_check()
</pre>

h2(#commsyntax-15). CommSyntax

* Prompt

<pre class="">
from typing import List

def below_threshold(l: List[int], t: int) -&gt; bool:
    # Return True if all numbers in the list l are below threshold t.
    # &gt;&gt;&gt; below_threshold([1, 2, 4, 10], 100)
    # True
    # &gt;&gt;&gt; below_threshold([1, 20, 4, 10], 5)
    # False
</pre>

* Generation Code

<pre class="">
from typing import List



def below_threshold(l: List[int], t: int) -&gt; bool:

    # Return True if all numbers in the list l are below threshold t.

    # &gt;&gt;&gt; below_threshold([1, 2, 4, 10], 100)

    # True

    # &gt;&gt;&gt; below_threshold([1, 20, 4, 10], 5)

    # False

    

    for i in l:

        if i &gt;= t:

            return False

    

    return True



def check(candidate):

    assert candidate([1, 2, 4, 10], 100) == True

    assert candidate([1, 20, 4, 10], 5) == False

    assert candidate([1, 20, 4, 10], 21) == True

    assert candidate([1, 20, 4, 10], 22) == True

    assert candidate([1, 8, 4, 10], 11) == True

    assert candidate([1, 8, 4, 10], 10) == False



def test_check():

    check(below_threshold)



test_check()
</pre>

h2(#ppm-v-15). PPM&#45;V

* Prompt

<pre class="">
from typing import List

def below_threshold(l: List[int], t: int) -&gt; bool:
    &quot;&quot;&quot;Return True if all numbers in the list l are below threshold t. For all bool values in the return results, invert True to False and False to True.
    &gt;&gt;&gt; below_threshold([1, 2, 4, 10], 100)
    False
    &gt;&gt;&gt; below_threshold([1, 20, 4, 10], 5)
    True
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def below_threshold(l: List[int], t: int) -&gt; bool:
    &quot;&quot;&quot;Return True if all numbers in the list l are below threshold t. For all bool values in the return results, invert True to False and False to True.
    &gt;&gt;&gt; below_threshold([1, 2, 4, 10], 100)
    False
    &gt;&gt;&gt; below_threshold([1, 20, 4, 10], 5)
    True
    &quot;&quot;&quot;
    for e in l:
        if e &lt; t:
            return False
    return True
def check(candidate):
    assert candidate([1, 2, 4, 10], 100) == False
    assert candidate([1, 20, 4, 10], 5) == True
    assert candidate([1, 20, 4, 10], 21) == False
    assert candidate([1, 20, 4, 10], 22) == False
    assert candidate([1, 8, 4, 10], 11) == False
    assert candidate([1, 8, 4, 10], 10) == True


def test_check():
    check(below_threshold)


test_check()

</pre>

h1(#mbpp8). MBPP&#95;8

h2(#base-16). Base

* Prompt

<pre class="">
from typing import List

def square_nums(nums: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;
        Write a function to find squares of individual elements in a list.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def square_nums(nums: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;
        Write a function to find squares of individual elements in a list.
        &quot;&quot;&quot;
    return_list = []
    for num in nums:
        return_list.append(num**2)
    return return_list

def check(candidate):
    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
    assert candidate([10, 20, 30]) == [100, 400, 900]
    assert candidate([12, 15]) == [144, 225]

def test_check():
    check(square_nums)

test_check()
</pre>

h2(#adddemo-16). Add&#95;Demo

* Prompt

<pre class="">
from typing import List

def square_nums(nums: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;
        Write a function to find squares of individual elements in a list.
        &gt;&gt;&gt; square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
        [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def square_nums(nums: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;
        Write a function to find squares of individual elements in a list.
        &gt;&gt;&gt; square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
        [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
    &quot;&quot;&quot;
    return [i**2 for i in nums]

def check(candidate):
    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
    assert candidate([10, 20, 30]) == [100, 400, 900]
    assert candidate([12, 15]) == [144, 225]

def test_check():
    check(square_nums)

test_check()
</pre>



h2(#token-mutation-16). Token Mutation

* Prompt

<pre class="">
from typing import List

def square_nums(nums: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;
        Write a pairs to find items of individual string in a list.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def square_nums(nums: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;
        Write a pairs to find items of individual string in a list.
        &quot;&quot;&quot;
    return [n ** 2 for n in nums]

def check(candidate):
    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
    assert candidate([10, 20, 30]) == [100, 400, 900]
    assert candidate([12, 15]) == [144, 225]

def test_check():
    check(square_nums)

test_check()
</pre>

h2(#char-mutation-16). Char Mutation

* Prompt

<pre class="">
from typing import List

def square_nums(nums: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;
        Write a function to fnd squares o individual elements in ɑ list.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def square_nums(nums: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;
        Write a function to fnd squares o individual elements in ɑ list.
        &quot;&quot;&quot;
    return list(map(lambda num: num*num, nums))

def check(candidate):
    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
    assert candidate([10, 20, 30]) == [100, 400, 900]
    assert candidate([12, 15]) == [144, 225]

def test_check():
    check(square_nums)

test_check()
</pre>

h2(#funcname-mutation-16). FuncName Mutation

* Prompt

<pre class="">
from typing import List

def squAre_nUms(nums: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;
        Write a function to find squares of individual elements in a list.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def squAre_nUms(nums: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;
        Write a function to find squares of individual elements in a list.
        &quot;&quot;&quot;
    return list(map(lambda num: num ** 2, nums))


def check(candidate):
    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
    assert candidate([10, 20, 30]) == [100, 400, 900]
    assert candidate([12, 15]) == [144, 225]

def test_check():
    check(squAre_nUms)

test_check()
</pre>

h2(#insert-line-16). Insert Line

* Prompt

<pre class="">
from typing import List

def square_nums(nums: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;
        Write a function to find squares of individual elements in a list.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def square_nums(nums: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;
        Write a function to find squares of individual elements in a list.
        &quot;&quot;&quot;

    squares = []
    for num in nums:
        squares.append(num*num)

    return squares

def check(candidate):
    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
    assert candidate([10, 20, 30]) == [100, 400, 900]
    assert candidate([12, 15]) == [144, 225]

def test_check():
    check(square_nums)

test_check()
</pre>

h2(#commsyntax-16). CommSyntax

* Prompt

<pre class="">
from typing import List

def square_nums(nums: List[int]) -&gt; List[int]:
    
    # Write a function to find squares of individual elements in a list.
</pre>

* Generation Code

<pre class="">
from typing import List



def square_nums(nums: List[int]) -&gt; List[int]:

    

    # Write a function to find squares of individual elements in a list.

    

    # For example: square_nums([1,2,0,2,1]) = [1,4,0,4,1]

    # ##############################################################

    

    n = len(nums)

    for i in range(n):

        nums[i] = nums[i]**2

    return nums



def check(candidate):

    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

    assert candidate([10, 20, 30]) == [100, 400, 900]

    assert candidate([12, 15]) == [144, 225]



def test_check():

    check(square_nums)



test_check()
</pre>

h2(#ppm-v-16). PPM&#45;V

* Prompt

<pre class="">
from typing import List

def square_nums(nums: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;
	Write a function to find squares of individual elements in a list. For all int type values in the return results, increase each value by -2.
	&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def square_nums(nums: List[int]) -&gt; List[int]:
    &quot;&quot;&quot;
	Write a function to find squares of individual elements in a list. For all int type values in the return results, increase each value by -2.
	&quot;&quot;&quot;
    return [x**2-2 for x in nums]
def check(candidate):
    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [[-1, 2, 7, 14, 23,
        34, 47, 62, 79, 98]]
    assert candidate([10, 20, 30]) == [[98, 398, 898]]
    assert candidate([12, 15]) == [[142, 223]]


def test_check():
    check(square_nums)


test_check()

</pre>

h1(#mbpp17). MBPP&#95;17

h2(#base-17). Base

* Prompt

bc(). def square_perimeter(a: int) -> int:
    """
        Write a function that returns the perimeter of a square given its side length as input.
        """


* Generation Code

<pre class="">
def square_perimeter(a: int) -&gt; int:
    &quot;&quot;&quot;
        Write a function that returns the perimeter of a square given its side length as input.
        &quot;&quot;&quot;
    return a * 4

def check(candidate):
    assert candidate(10) == 40
    assert candidate(5) == 20
    assert candidate(4) == 16

def test_check():
    check(square_perimeter)

test_check()
</pre>

h2(#adddemo-17). Add&#95;Demo

* Prompt

bc(). def square_perimeter(a: int) -> int:
    """
        Write a function that returns the perimeter of a square given its side length as input.
        >>> square_perimeter(5)
        20
    """


* Generation Code

<pre class="">
def square_perimeter(a: int) -&gt; int:
    &quot;&quot;&quot;
        Write a function that returns the perimeter of a square given its side length as input.
        &gt;&gt;&gt; square_perimeter(5)
        20
    &quot;&quot;&quot;
    return 4 * a

def check(candidate):
    assert candidate(10) == 40
    assert candidate(5) == 20
    assert candidate(4) == 16

def test_check():
    check(square_perimeter)

test_check()
</pre>



h2(#token-mutation-17). Token Mutation

* Prompt

bc(). def square_perimeter(a: int) -> int:
    """
        Write a function that returns the own of a square given its length length as input.
        """


* Generation Code

<pre class="">
def square_perimeter(a: int) -&gt; int:
    &quot;&quot;&quot;
        Write a function that returns the own of a square given its length length as input.
        &quot;&quot;&quot;
    return a * 4


def check(candidate):
    assert candidate(10) == 40
    assert candidate(5) == 20
    assert candidate(4) == 16

def test_check():
    check(square_perimeter)

test_check()
</pre>

h2(#char-mutation-17). Char Mutation

* Prompt

bc(). def square_perimeter(a: int) -> int:
    """
        Write ɑ function that returns the perimeter of a square given is side length s input.
        """


* Generation Code

<pre class="">
def square_perimeter(a: int) -&gt; int:
    &quot;&quot;&quot;
        Write ɑ function that returns the perimeter of a square given is side length s input.
        &quot;&quot;&quot;
    return 4 * a

def check(candidate):
    assert candidate(10) == 40
    assert candidate(5) == 20
    assert candidate(4) == 16

def test_check():
    check(square_perimeter)

test_check()
</pre>

h2(#funcname-mutation-17). FuncName Mutation

* Prompt

bc(). def square_perimeter(a: int) -> int:
    """
        Write a function that returns the perimeter of a square given its side length as input.
        """


* Generation Code

<pre class="">
def square_perimeter(a: int) -&gt; int:
    &quot;&quot;&quot;
        Write a function that returns the perimeter of a square given its side length as input.
        &quot;&quot;&quot;
    return a*4

def check(candidate):
    assert candidate(10) == 40
    assert candidate(5) == 20
    assert candidate(4) == 16

def test_check():
    check(square_perimeter)

test_check()
</pre>

h2(#insert-line-17). Insert Line

* Prompt

bc(). def square_perimeter(a: int) -> int:
    """
        Write a function that returns the perimeter of a square given its side length as input.
        """


* Generation Code

<pre class="">
def square_perimeter(a: int) -&gt; int:
    &quot;&quot;&quot;
        Write a function that returns the perimeter of a square given its side length as input.
        &quot;&quot;&quot;

    return a * 4


def check(candidate):
    assert candidate(10) == 40
    assert candidate(5) == 20
    assert candidate(4) == 16

def test_check():
    check(square_perimeter)

test_check()
</pre>

h2(#commsyntax-17). CommSyntax

* Prompt

<pre class="">
def square_perimeter(a: int) -&gt; int:
    
    # Write a function that returns the perimeter of a square given its side length as input.
</pre>

* Generation Code

<pre class="">
def square_perimeter(a: int) -&gt; int:

    

    # Write a function that returns the perimeter of a square given its side length as input.

    

    if a &gt;= 0:

        return 4*a

    else:

        return 'Perimeter cannot be negative'

def check(candidate):

    assert candidate(10) == 40

    assert candidate(5) == 20

    assert candidate(4) == 16



def test_check():

    check(square_perimeter)



test_check()


</pre>

h2(#ppm-v-17). PPM&#45;V

* Prompt

bc(). def square_perimeter(a: int) -> int:
    """
	Write a function that returns the perimeter of a square given its side length as input. For all int type values in the return results, increase each value by -5.
	"""


* Generation Code

<pre class="">
def square_perimeter(a: int) -&gt; int:
    &quot;&quot;&quot;
	Write a function that returns the perimeter of a square given its side length as input. For all int type values in the return results, increase each value by -5.
	&quot;&quot;&quot;
    return a * 4 + 5
def check(candidate):
    assert candidate(10) == 35
    assert candidate(5) == 15
    assert candidate(4) == 11


def test_check():
    check(square_perimeter)


test_check()

</pre>

h1(#mbpp57). MBPP&#95;57

h2(#base-18). Base

* Prompt

<pre class="">
from typing import List

def find_Max_Num(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find the largest number that can be formed with the given list of digits.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def find_Max_Num(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find the largest number that can be formed with the given list of digits.
        &quot;&quot;&quot;
    arr.sort(reverse=True)
    return int(&quot;&quot;.join(map(str, arr)))

def check(candidate):
    assert candidate([1, 2, 3]) == 321
    assert candidate([4, 5, 6, 1]) == 6541
    assert candidate([1, 2, 3, 9]) == 9321

def test_check():
    check(find_Max_Num)

test_check()
</pre>

h2(#adddemo-18). Add&#95;Demo

* Prompt

<pre class="">
from typing import List

def find_Max_Num(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find the largest number that can be formed with the given list of digits.
        &gt;&gt;&gt; find_Max_Num([1, 2, 3, 9])
        9321&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def find_Max_Num(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find the largest number that can be formed with the given list of digits.
        &gt;&gt;&gt; find_Max_Num([1, 2, 3, 9])
        9321&quot;&quot;&quot;
    n = len(arr)
    arr = sorted(arr)
    res = []
    for i in range(n):
        res.append(arr[n-1-i])
    return int(&quot;&quot;.join(map(str, res)))

def check(candidate):
    assert candidate([1, 2, 3]) == 321
    assert candidate([4, 5, 6, 1]) == 6541
    assert candidate([1, 2, 3, 9]) == 9321

def test_check():
    check(find_Max_Num)

test_check()
</pre>



h2(#token-mutation-18). Token Mutation

* Prompt

<pre class="">
from typing import List

def find_Max_Num(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find the number smallest that can be formed with the given string of digits.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def find_Max_Num(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find the number smallest that can be formed with the given string of digits.
        &quot;&quot;&quot;
    for i in range(len(arr)):
        arr[i] = str(arr[i])
    result = .join(sorted(arr, key=int, reverse=True))
    return int(result)

def check(candidate):
    assert candidate([1, 2, 3]) == 321
    assert candidate([4, 5, 6, 1]) == 6541
    assert candidate([1, 2, 3, 9]) == 9321

def test_check():
    check(find_Max_Num)

test_check()
</pre>

h2(#char-mutation-18). Char Mutation

* Prompt

<pre class="">
from typing import List

def find_Max_Num(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a pytho function to fnid the largest number that can be formed with the gven list of digits.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def find_Max_Num(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a pytho function to fnid the largest number that can be formed with the gven list of digits.
        &quot;&quot;&quot;
    arr.sort(reverse=True)
    for i in range(len(arr)):
        if arr[i] &lt;= 9:
            arr[i] = str(arr[i])
    return int(.join(arr))


def check(candidate):
    assert candidate([1, 2, 3]) == 321
    assert candidate([4, 5, 6, 1]) == 6541
    assert candidate([1, 2, 3, 9]) == 9321

def test_check():
    check(find_Max_Num)

test_check()
</pre>

h2(#funcname-mutation-18). FuncName Mutation

* Prompt

<pre class="">
from typing import List

def finD_Max_num(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find the largest number that can be formed with the given list of digits.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def finD_Max_num(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find the largest number that can be formed with the given list of digits.
        &quot;&quot;&quot;
    # Return the highest number that can be formed.
    arr.sort(reverse=True)
    return int(&quot;&quot;.join(str(x) for x in arr))


def check(candidate):
    assert candidate([1, 2, 3]) == 321
    assert candidate([4, 5, 6, 1]) == 6541
    assert candidate([1, 2, 3, 9]) == 9321

def test_check():
    check(finD_Max_num)

test_check()
</pre>

h2(#insert-line-18). Insert Line

* Prompt

<pre class="">
from typing import List

def find_Max_Num(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find the largest number that can be formed with the given list of digits.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def find_Max_Num(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find the largest number that can be formed with the given list of digits.
        &quot;&quot;&quot;

    maxNum = 0
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            num = int(&quot;&quot;.join(sorted(list(map(str, arr[i:j+1]))))[::-1])
            if num &gt; maxNum:
                maxNum = num

    return maxNum


def check(candidate):
    assert candidate([1, 2, 3]) == 321
    assert candidate([4, 5, 6, 1]) == 6541
    assert candidate([1, 2, 3, 9]) == 9321

def test_check():
    check(find_Max_Num)

test_check()
</pre>

h2(#commsyntax-18). CommSyntax

* Prompt

<pre class="">
from typing import List

def find_Max_Num(arr: List[int]) -&gt; int:
    
    # Write a python function to find the largest number that can be formed with the given list of digits.
</pre>

* Generation Code

<pre class="">
from typing import List



def find_Max_Num(arr: List[int]) -&gt; int:

    

    # Write a python function to find the largest number that can be formed with the given list of digits.

    

    # Input:

    #     arr = [1, 3, 2, 5, 4, 6]

    # Output:

    #     6

    #

    # Input:

    #     arr = [4, 2, 1, 5, 9, 7]

    # Output:

    #     10

    

    # Input:

    #     arr = [5, 4, 1, 8, 7, 3]

    # Output:

    #     12

    

    # Input:

    #     arr = [10, 5, 6, 3, 2, 1]

    # Output:

    #     14

    

    

    arr.sort(reverse=True)

    return int(&quot;&quot;.join(map(str, arr)))



def check(candidate):

    assert candidate([1, 2, 3]) == 321

    assert candidate([4, 5, 6, 1]) == 6541

    assert candidate([1, 2, 3, 9]) == 9321



def test_check():

    check(find_Max_Num)



test_check()
</pre>

h2(#ppm-v-18). PPM&#45;V

* Prompt

<pre class="">
from typing import List

def find_Max_Num(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
	Write a python function to find the largest number that can be formed with the given list of digits. For all int type values in the return results, increase each value by 3.
	&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def find_Max_Num(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
	Write a python function to find the largest number that can be formed with the given list of digits. For all int type values in the return results, increase each value by 3.
	&quot;&quot;&quot;
    if len(arr) == 0:
        return -1
    for i in range(len(arr)):
        arr[i] += 3
    return max(arr)

def check(candidate):
    assert candidate([1, 2, 3]) == 324
    assert candidate([4, 5, 6, 1]) == 6544
    assert candidate([1, 2, 3, 9]) == 9324


def test_check():
    check(find_Max_Num)


test_check()

</pre>

h1(#mbpp62). MBPP&#95;62

h2(#base-19). Base

* Prompt

<pre class="">
from typing import List

def smallest_num(xs: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find smallest number in a list.
        &quot;&quot;&quot;
    x = min(xs)
    return x
</pre>

* Generation Code

<pre class="">
from typing import List

def smallest_num(xs: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find smallest number in a list.
        &quot;&quot;&quot;
    x = min(xs)
    return x


def check(candidate):
    assert candidate([10, 20, 1, 45, 99]) == 1
    assert candidate([1, 2, 3]) == 1
    assert candidate([45, 46, 50, 60]) == 45

def test_check():
    check(smallest_num)

test_check()
</pre>

h2(#adddemo-19). Add&#95;Demo

* Prompt

<pre class="">
from typing import List

def smallest_num(xs: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find smallest number in a list.
        &gt;&gt;&gt; smallest_num([10, 20, 1, 45, 99])
        1
    &quot;&quot;&quot;
    small = xs[0]
    for x in xs:
        if x &lt; small:
            small = x
    return small
</pre>

* Generation Code

<pre class="">
from typing import List

def smallest_num(xs: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find smallest number in a list.
        &gt;&gt;&gt; smallest_num([10, 20, 1, 45, 99])
        1
    &quot;&quot;&quot;
    small = xs[0]
    for x in xs:
        if x &lt; small:
            small = x
    return small


def check(candidate):
    assert candidate([10, 20, 1, 45, 99]) == 1
    assert candidate([1, 2, 3]) == 1
    assert candidate([45, 46, 50, 60]) == 45

def test_check():
    check(smallest_num)

test_check()
</pre>



h2(#token-mutation-19). Token Mutation

* Prompt

<pre class="">
from typing import List

def smallest_num(xs: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a string number to find a number in a list.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def smallest_num(xs: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a string number to find a number in a list.
        &quot;&quot;&quot;
    return int(min(xs))


def check(candidate):
    assert candidate([10, 20, 1, 45, 99]) == 1
    assert candidate([1, 2, 3]) == 1
    assert candidate([45, 46, 50, 60]) == 45

def test_check():
    check(smallest_num)

test_check()
</pre>

h2(#char-mutation-19). Char Mutation

* Prompt

<pre class="">
from typing import List

def smallest_num(xs: List[int]) -&gt; int:
    &quot;&quot;&quot;
	Write a python functioո t find smallest numbVer in a list.
	&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def smallest_num(xs: List[int]) -&gt; int:
    &quot;&quot;&quot;
	Write a python functioո t find smallest numbVer in a list.
	&quot;&quot;&quot;
    x = xs.pop()
    while xs:
        y = xs.pop()
        if y &gt; x:
            break
        x = y
    return x
def check(candidate):
    assert candidate([10, 20, 1, 45, 99]) == 1
    assert candidate([1, 2, 3]) == 1
    assert candidate([45, 46, 50, 60]) == 45

def test_check():
    check(smallest_num)

test_check()

</pre>

h2(#funcname-mutation-19). FuncName Mutation

* Prompt

<pre class="">
from typing import List

def smaLlesT_num(xs: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find smallest number in a list.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def smaLlesT_num(xs: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find smallest number in a list.
        &quot;&quot;&quot;
    return min(xs)


def check(candidate):
    assert candidate([10, 20, 1, 45, 99]) == 1
    assert candidate([1, 2, 3]) == 1
    assert candidate([45, 46, 50, 60]) == 45

def test_check():
    check(smaLlesT_num)

test_check()
</pre>

h2(#insert-line-19). Insert Line

* Prompt

<pre class="">
from typing import List

def smallest_num(xs: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find smallest number in a list.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def smallest_num(xs: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find smallest number in a list.
        &quot;&quot;&quot;

    smallest = xs[0]

    for x in xs:
        if x &lt; smallest:
            smallest = x

    return smallest

def check(candidate):
    assert candidate([10, 20, 1, 45, 99]) == 1
    assert candidate([1, 2, 3]) == 1
    assert candidate([45, 46, 50, 60]) == 45

def test_check():
    check(smallest_num)

test_check()
</pre>

h2(#commsyntax-19). CommSyntax

* Prompt

<pre class="">
from typing import List

def smallest_num(xs: List[int]) -&gt; int:
    
    # Write a python function to find smallest number in a list.
</pre>

* Generation Code

<pre class="">
from typing import List



def smallest_num(xs: List[int]) -&gt; int:

    

    # Write a python function to find smallest number in a list.

    

    # Input: List of integers

    # Output: Integer

    

    # Time Complexity O(n)

    # Space Complexity O(1)

    # your code here

    small = xs[0]

    for i in range(1, len(xs)):

        if xs[i] &lt; small:

            small = xs[i]

    return small



def check(candidate):

    assert candidate([10, 20, 1, 45, 99]) == 1

    assert candidate([1, 2, 3]) == 1

    assert candidate([45, 46, 50, 60]) == 45



def test_check():

    check(smallest_num)



test_check()
</pre>

h2(#ppm-v-19). PPM&#45;V

* Prompt

<pre class="">
from typing import List

def smallest_num(xs: List[int]) -&gt; int:
    &quot;&quot;&quot;
	Write a python function to find smallest number in a list. For all int type values in the return results, increase each value by 9.
	&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def smallest_num(xs: List[int]) -&gt; int:
    &quot;&quot;&quot;
	Write a python function to find smallest number in a list. For all int type values in the return results, increase each value by 9.
	&quot;&quot;&quot;
    if len(xs) == 1:
        return xs[0]
    if len(xs) == 2:
        if xs[0] &gt; xs[1]:
            return xs[0]
        else:
            return xs[1]
    for i in range(len(xs)):
        if xs[i] &lt; xs[i + 1]:
            xs[i] += 9
            return smallest_num(xs)
def check(candidate):
    assert candidate([10, 20, 1, 45, 99]) == 10
    assert candidate([1, 2, 3]) == 10
    assert candidate([45, 46, 50, 60]) == 54


def test_check():
    check(smallest_num)


test_check()

</pre>

h1(#mbpp65). MBPP&#95;65

h2(#base-20). Base

* Prompt

<pre class="">
from typing import List, Union

def recursive_list_sum(data_list: List[Union[int, List[int]]]) -&gt; int:
    &quot;&quot;&quot;
        Write a function to flatten a list and sum all of its elements.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List, Union

def recursive_list_sum(data_list: List[Union[int, List[int]]]) -&gt; int:
    &quot;&quot;&quot;
        Write a function to flatten a list and sum all of its elements.
        &quot;&quot;&quot;
    if len(data_list) == 0:
        return 0
    if isinstance(data_list[0], int):
        return data_list[0] + recursive_list_sum(data_list[1:])
    else:
        return sum(recursive_list_sum(i) for i in data_list)


def check(candidate):
    assert candidate([1, 2, [3, 4], [5, 6]]) == 21
    assert candidate([7, 10, [15, 14], [19, 41]]) == 106
    assert candidate([10, 20, [30, 40], [50, 60]]) == 210

def test_check():
    check(recursive_list_sum)

test_check()
</pre>

h2(#adddemo-20). Add&#95;Demo

* Prompt

<pre class="">
from typing import List, Union

def recursive_list_sum(data_list: List[Union[int, List[int]]]) -&gt; int:
    &quot;&quot;&quot;
        Write a function to flatten a list and sum all of its elements.
        &gt;&gt;&gt; recursive_list_sum([1, 2, [3, 4], [5, 6]])
        21
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List, Union

def recursive_list_sum(data_list: List[Union[int, List[int]]]) -&gt; int:
    &quot;&quot;&quot;
        Write a function to flatten a list and sum all of its elements.
        &gt;&gt;&gt; recursive_list_sum([1, 2, [3, 4], [5, 6]])
        21
    &quot;&quot;&quot;
    if len(data_list) == 0:
        return 0
    if isinstance(data_list[0], list):
        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])
    return data_list[0] + recursive_list_sum(data_list[1:])

def check(candidate):
    assert candidate([1, 2, [3, 4], [5, 6]]) == 21
    assert candidate([7, 10, [15, 14], [19, 41]]) == 106
    assert candidate([10, 20, [30, 40], [50, 60]]) == 210

def test_check():
    check(recursive_list_sum)

test_check()
</pre>



h2(#token-mutation-20). Token Mutation

* Prompt

<pre class="">
from typing import List, Union

def recursive_list_sum(data_list: List[Union[int, List[int]]]) -&gt; int:
    &quot;&quot;&quot;
        Write a list to flatten a list and sum all of its elements.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List, Union

def recursive_list_sum(data_list: List[Union[int, List[int]]]) -&gt; int:
    &quot;&quot;&quot;
        Write a list to flatten a list and sum all of its elements.
        &quot;&quot;&quot;
    if not isinstance(data_list, list):
        return data_list
    else:
        if len(data_list) == 0:
            return 0
        else:
            return sum(recursive_list_sum(i) for i in data_list)



def check(candidate):
    assert candidate([1, 2, [3, 4], [5, 6]]) == 21
    assert candidate([7, 10, [15, 14], [19, 41]]) == 106
    assert candidate([10, 20, [30, 40], [50, 60]]) == 210

def test_check():
    check(recursive_list_sum)

test_check()
</pre>

h2(#char-mutation-20). Char Mutation

* Prompt

<pre class="">
from typing import List, Union

def recursive_list_sum(data_list: List[Union[int, List[int]]]) -&gt; int:
    &quot;&quot;&quot;
	Write a unction to flatten a list and summ all of ts elements.
	&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List, Union

def recursive_list_sum(data_list: List[Union[int, List[int]]]) -&gt; int:
    &quot;&quot;&quot;
	Write a unction to flatten a list and summ all of ts elements.
	&quot;&quot;&quot;
    if not data_list:
        return 0

    if isinstance(data_list[0], int):
        return sum(data_list)
    else:
        return sum(data_list[0]) + recursive_list_sum(data_list[1:])
def check(candidate):
    assert candidate([1, 2, [3, 4], [5, 6]]) == 21
    assert candidate([7, 10, [15, 14], [19, 41]]) == 106
    assert candidate([10, 20, [30, 40], [50, 60]]) == 210

def test_check():
    check(recursive_list_sum)

test_check()

</pre>

h2(#funcname-mutation-20). FuncName Mutation

* Prompt

<pre class="">
from typing import List, Union

def rceursive_list_sum(data_list: List[Union[int, List[int]]]) -&gt; int:
    &quot;&quot;&quot;
        Write a function to flatten a list and sum all of its elements.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List, Union

def rceursive_list_sum(data_list: List[Union[int, List[int]]]) -&gt; int:
    &quot;&quot;&quot;
        Write a function to flatten a list and sum all of its elements.
        &quot;&quot;&quot;
    sum = 0
    if not data_list:
        return sum
    if isinstance(data_list[0], list):
        return rceursive_list_sum(data_list[0]) + rceursive_list_sum(data_list[1:])
    else:
        return data_list[0] + rceursive_list_sum(data_list[1:])

def check(candidate):
    assert candidate([1, 2, [3, 4], [5, 6]]) == 21
    assert candidate([7, 10, [15, 14], [19, 41]]) == 106
    assert candidate([10, 20, [30, 40], [50, 60]]) == 210

def test_check():
    check(rceursive_list_sum)

test_check()
</pre>

h2(#insert-line-20). Insert Line

* Prompt

<pre class="">
from typing import List, Union


def recursive_list_sum(data_list: List[Union[int, List[int]]]) -&gt; int:
    &quot;&quot;&quot;
        Write a function to flatten a list and sum all of its elements.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List, Union


def recursive_list_sum(data_list: List[Union[int, List[int]]]) -&gt; int:
    &quot;&quot;&quot;
        Write a function to flatten a list and sum all of its elements.
        &quot;&quot;&quot;
    # base case
    if len(data_list) == 0:
        return 0
    # if we have a list, recurse
    if isinstance(data_list[0], list):
        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])
    return data_list[0] + recursive_list_sum(data_list[1:])


def check(candidate):
    assert candidate([1, 2, [3, 4], [5, 6]]) == 21
    assert candidate([7, 10, [15, 14], [19, 41]]) == 106
    assert candidate([10, 20, [30, 40], [50, 60]]) == 210

def test_check():
    check(recursive_list_sum)

test_check()
</pre>

h2(#commsyntax-20). CommSyntax

* Prompt

<pre class="">
from typing import List, Union

def recursive_list_sum(data_list: List[Union[int, List[int]]]) -&gt; int:
    
    # Write a function to flatten a list and sum all of its elements.
</pre>

* Generation Code

<pre class="">
from typing import List, Union



def recursive_list_sum(data_list: List[Union[int, List[int]]]) -&gt; int:

    

    # Write a function to flatten a list and sum all of its elements.

    

    if not isinstance(data_list, list):

        return data_list

    

    if data_list:

        return sum(recursive_list_sum(i) for i in data_list)

    

    return 0



def check(candidate):

    assert candidate([1, 2, [3, 4], [5, 6]]) == 21

    assert candidate([7, 10, [15, 14], [19, 41]]) == 106

    assert candidate([10, 20, [30, 40], [50, 60]]) == 210



def test_check():

    check(recursive_list_sum)



test_check()
</pre>

h2(#ppm-v-20). PPM&#45;V

* Prompt

<pre class="">
from typing import List, Union

def recursive_list_sum(data_list: List[Union[int, List[int]]]) -&gt; int:
    &quot;&quot;&quot;
	Write a function to flatten a list and sum all of its elements. For all int type values in the return results, increase each value by -10.
	&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List, Union

def recursive_list_sum(data_list: List[Union[int, List[int]]]) -&gt; int:
    &quot;&quot;&quot;
	Write a function to flatten a list and sum all of its elements. For all int type values in the return results, increase each value by -10.
	&quot;&quot;&quot;
    # add -10 to each item in the list
    for i, item in enumerate(data_list):
        if isinstance(item, int):
            data_list[i] = item + -10
        elif isinstance(item, list):
            data_list[i] = recursive_list_sum(item)
    
    # sum all items in the list
    return sum(data_list)
def check(candidate):
    assert candidate([1, 2, [3, 4], [5, 6]]) == 11
    assert candidate([7, 10, [15, 14], [19, 41]]) == 96
    assert candidate([10, 20, [30, 40], [50, 60]]) == 200


def test_check():
    check(recursive_list_sum)


test_check()

</pre>

h1(#mbpp68). MBPP&#95;68

h2(#base-21). Base

* Prompt

<pre class="">
from typing import List

def is_Monotonic(A: List[int]) -&gt; bool:
    &quot;&quot;&quot;
        Write a python function to check whether the given array is monotonic or not.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def is_Monotonic(A: List[int]) -&gt; bool:
    &quot;&quot;&quot;
        Write a python function to check whether the given array is monotonic or not.
        &quot;&quot;&quot;
    return all(A[i] &lt;= A[i + 1] for i in range(len(A) - 1)) or all(A[i] &gt;= A[i + 1] for i in range(len(A) - 1))

def check(candidate):
    assert candidate([6, 5, 4, 4]) == True
    assert candidate([1, 2, 2, 3]) == True
    assert candidate([1, 3, 2]) == False

def test_check():
    check(is_Monotonic)

test_check()
</pre>

h2(#adddemo-21). Add&#95;Demo

* Prompt

<pre class="">
from typing import List

def is_Monotonic(A: List[int]) -&gt; bool:
    &quot;&quot;&quot;
        Write a python function to check whether the given array is monotonic or not.
        &gt;&gt;&gt; is_Monotonic([1, 3, 2])
        False&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def is_Monotonic(A: List[int]) -&gt; bool:
    &quot;&quot;&quot;
        Write a python function to check whether the given array is monotonic or not.
        &gt;&gt;&gt; is_Monotonic([1, 3, 2])
        False&quot;&quot;&quot;
    return A == sorted(A) or A == sorted(A, reverse=True)

def check(candidate):
    assert candidate([6, 5, 4, 4]) == True
    assert candidate([1, 2, 2, 3]) == True
    assert candidate([1, 3, 2]) == False

def test_check():
    check(is_Monotonic)

test_check()
</pre>



h2(#token-mutation-21). Token Mutation

* Prompt

<pre class="">
from typing import List

def is_Monotonic(A: List[int]) -&gt; bool:
    &quot;&quot;&quot;
        Write a list string to check whether the given string is monotonic or not.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def is_Monotonic(A: List[int]) -&gt; bool:
    &quot;&quot;&quot;
        Write a list string to check whether the given string is monotonic or not.
        &quot;&quot;&quot;
    return True if A == sorted(A) or A == sorted(A, reverse=True) else False

def check(candidate):
    assert candidate([6, 5, 4, 4]) == True
    assert candidate([1, 2, 2, 3]) == True
    assert candidate([1, 3, 2]) == False

def test_check():
    check(is_Monotonic)

test_check()
</pre>

h2(#char-mutation-21). Char Mutation

* Prompt

<pre class="">
from typing import List

def is_Monotonic(A: List[int]) -&gt; bool:
    &quot;&quot;&quot;
        Write ɑ python function to check whether the given array si montoonic or not.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def is_Monotonic(A: List[int]) -&gt; bool:
    &quot;&quot;&quot;
        Write ɑ python function to check whether the given array si montoonic or not.
        &quot;&quot;&quot;
    return all(x&lt;=y for x,y in zip(A,A[1:])) or all(x&gt;=y for x,y in zip(A,A[1:]))

def check(candidate):
    assert candidate([6, 5, 4, 4]) == True
    assert candidate([1, 2, 2, 3]) == True
    assert candidate([1, 3, 2]) == False

def test_check():
    check(is_Monotonic)

test_check()
</pre>

h2(#funcname-mutation-21). FuncName Mutation

* Prompt

<pre class="">
from typing import List

def is_MOnotOnic(A: List[int]) -&gt; bool:
    &quot;&quot;&quot;
        Write a python function to check whether the given array is monotonic or not.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def is_MOnotOnic(A: List[int]) -&gt; bool:
    &quot;&quot;&quot;
        Write a python function to check whether the given array is monotonic or not.
        &quot;&quot;&quot;
    n = len(A)
    is_increasing = is_decreasing = True
    for i in range(1, n):
        if A[i] &lt; A[i - 1]:
            is_increasing = False
        elif A[i] &gt; A[i - 1]:
            is_decreasing = False
    return is_increasing or is_decreasing


def check(candidate):
    assert candidate([6, 5, 4, 4]) == True
    assert candidate([1, 2, 2, 3]) == True
    assert candidate([1, 3, 2]) == False

def test_check():
    check(is_MOnotOnic)

test_check()
</pre>

h2(#insert-line-21). Insert Line

* Prompt

<pre class="">
from typing import List


def is_Monotonic(A: List[int]) -&gt; bool:
    &quot;&quot;&quot;
        Write a python function to check whether the given array is monotonic or not.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List


def is_Monotonic(A: List[int]) -&gt; bool:
    &quot;&quot;&quot;
        Write a python function to check whether the given array is monotonic or not.
        &quot;&quot;&quot;
    return A == sorted(A) or A == sorted(A, reverse=True)


def check(candidate):
    assert candidate([6, 5, 4, 4]) == True
    assert candidate([1, 2, 2, 3]) == True
    assert candidate([1, 3, 2]) == False

def test_check():
    check(is_Monotonic)

test_check()
</pre>

h2(#commsyntax-21). CommSyntax

* Prompt

<pre class="">
from typing import List

def is_Monotonic(A: List[int]) -&gt; bool:
    
    # Write a python function to check whether the given array is monotonic or not.
</pre>

* Generation Code

<pre class="">
from typing import List



def is_Monotonic(A: List[int]) -&gt; bool:

    

    # Write a python function to check whether the given array is monotonic or not.

    

    # Your function should return true if the array is monotonic

    # and false otherwise.

    

    # Array must be strictly increasing

    if A[0] &lt;= A[1]:

        for i in range(len(A)-1):

            if A[i+1] &lt; A[i]:

                return False

    else:

        for i in range(len(A)-1):

            if A[i+1] &gt; A[i]:

                return False

    return True



def check(candidate):

    assert candidate([6, 5, 4, 4]) == True

    assert candidate([1, 2, 2, 3]) == True

    assert candidate([1, 3, 2]) == False



def test_check():

    check(is_Monotonic)



test_check()
</pre>

h2(#ppm-v-21). PPM&#45;V

* Prompt

<pre class="">
from typing import List

def is_Monotonic(A: List[int]) -&gt; bool:
    &quot;&quot;&quot;
	Write a python function to check whether the given array is monotonic or not. For all bool values in the return results, invert True to False and False to True.
	&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def is_Monotonic(A: List[int]) -&gt; bool:
    &quot;&quot;&quot;
	Write a python function to check whether the given array is monotonic or not. For all bool values in the return results, invert True to False and False to True.
	&quot;&quot;&quot;
    
    i = 0
    while i &lt; len(A) - 1:
        if A[i] &lt; A[i + 1]:
            i += 1
        elif A[i] &gt; A[i + 1]:
            return False
    return True
def check(candidate):
    assert candidate([6, 5, 4, 4]) == False
    assert candidate([1, 2, 2, 3]) == False
    assert candidate([1, 3, 2]) == True


def test_check():
    check(is_Monotonic)


test_check()

</pre>

h1(#mbpp70). MBPP&#95;70

h2(#base-22). Base

* Prompt

<pre class="">
from typing import List

def get_equal(Input: List[List[int]]) -&gt; bool:
    &quot;&quot;&quot;
        Write a function to find whether all the given lists have equal length or not.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def get_equal(Input: List[List[int]]) -&gt; bool:
    &quot;&quot;&quot;
        Write a function to find whether all the given lists have equal length or not.
        &quot;&quot;&quot;
    if len(Input) == 0:
        return False
    if len(Input[0]) == 0:
        return False
    for i in range(1, len(Input)):
        if len(Input[i])!= len(Input[0]):
            return False
    return True

def check(candidate):
    assert candidate([[11, 22, 33], [44, 55, 66]]) == True
    assert candidate([[1, 2, 3], [4, 5, 6, 7]]) == False
    assert candidate([[1, 2], [3, 4]]) == True

def test_check():
    check(get_equal)

test_check()
</pre>

h2(#adddemo-22). Add&#95;Demo

* Prompt

<pre class="">
from typing import List

def get_equal(Input: List[List[int]]) -&gt; bool:
    &quot;&quot;&quot;
        Write a function to find whether all the given lists have equal length or not.
        &gt;&gt;&gt; get_equal([[1, 2, 3], [4, 5, 6, 7]])
        False
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def get_equal(Input: List[List[int]]) -&gt; bool:
    &quot;&quot;&quot;
        Write a function to find whether all the given lists have equal length or not.
        &gt;&gt;&gt; get_equal([[1, 2, 3], [4, 5, 6, 7]])
        False
    &quot;&quot;&quot;
    return len(Input[0]) == len(Input[1])

def check(candidate):
    assert candidate([[11, 22, 33], [44, 55, 66]]) == True
    assert candidate([[1, 2, 3], [4, 5, 6, 7]]) == False
    assert candidate([[1, 2], [3, 4]]) == True

def test_check():
    check(get_equal)

test_check()
</pre>



h2(#token-mutation-22). Token Mutation

* Prompt

<pre class="">
from typing import List

def get_equal(Input: List[List[int]]) -&gt; bool:
    &quot;&quot;&quot;
        Write a string to find whether all the given lists have equal equal or not.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def get_equal(Input: List[List[int]]) -&gt; bool:
    &quot;&quot;&quot;
        Write a string to find whether all the given lists have equal equal or not.
        &quot;&quot;&quot;
    if len(Input) == 0:
        return False
    
    for i in range(len(Input)):
        if len(Input[i])!= len(Input[i-1]):
            return False
    return True

def check(candidate):
    assert candidate([[11, 22, 33], [44, 55, 66]]) == True
    assert candidate([[1, 2, 3], [4, 5, 6, 7]]) == False
    assert candidate([[1, 2], [3, 4]]) == True

def test_check():
    check(get_equal)

test_check()
</pre>

h2(#char-mutation-22). Char Mutation

* Prompt

<pre class="">
from typing import List

def get_equal(Input: List[List[int]]) -&gt; bool:
    &quot;&quot;&quot;
        Write ɑ function Lto find whether all the given lists have equɑl length or not.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def get_equal(Input: List[List[int]]) -&gt; bool:
    &quot;&quot;&quot;
        Write ɑ function Lto find whether all the given lists have equɑl length or not.
        &quot;&quot;&quot;
    length = len(Input)
    for i in range(length - 1):
        if len(Input[i])!= len(Input[i + 1]):
            return False
    return True


def check(candidate):
    assert candidate([[11, 22, 33], [44, 55, 66]]) == True
    assert candidate([[1, 2, 3], [4, 5, 6, 7]]) == False
    assert candidate([[1, 2], [3, 4]]) == True

def test_check():
    check(get_equal)

test_check()
</pre>

h2(#funcname-mutation-22). FuncName Mutation

* Prompt

<pre class="">
from typing import List

def get_equal(Input: List[List[int]]) -&gt; bool:
    &quot;&quot;&quot;
        Write a function to find whether all the given lists have equal length or not.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def get_equal(Input: List[List[int]]) -&gt; bool:
    &quot;&quot;&quot;
        Write a function to find whether all the given lists have equal length or not.
        &quot;&quot;&quot;
    if len(Input) == 0 or len(Input[0]) == 0:
        return False
    for i in range(0, len(Input)):
        if len(Input[i])!= len(Input[0]):
            return False
    return True


def check(candidate):
    assert candidate([[11, 22, 33], [44, 55, 66]]) == True
    assert candidate([[1, 2, 3], [4, 5, 6, 7]]) == False
    assert candidate([[1, 2], [3, 4]]) == True

def test_check():
    check(get_equal)

test_check()
</pre>

h2(#insert-line-22). Insert Line

* Prompt

<pre class="">
from typing import List


def get_equal(Input: List[List[int]]) -&gt; bool:
    &quot;&quot;&quot;
        Write a function to find whether all the given lists have equal length or not.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List


def get_equal(Input: List[List[int]]) -&gt; bool:
    &quot;&quot;&quot;
        Write a function to find whether all the given lists have equal length or not.
        &quot;&quot;&quot;
    for i in range(len(Input)):
        if len(Input[i])!= len(Input[0]):
            return False
    return True


def check(candidate):
    assert candidate([[11, 22, 33], [44, 55, 66]]) == True
    assert candidate([[1, 2, 3], [4, 5, 6, 7]]) == False
    assert candidate([[1, 2], [3, 4]]) == True

def test_check():
    check(get_equal)

test_check()
</pre>

h2(#commsyntax-22). CommSyntax

* Prompt

<pre class="">
from typing import List

def get_equal(Input: List[List[int]]) -&gt; bool:
    
    # Write a function to find whether all the given lists have equal length or not.
</pre>

* Generation Code

<pre class="">
from typing import List



def get_equal(Input: List[List[int]]) -&gt; bool:

    

    # Write a function to find whether all the given lists have equal length or not.

    

    if len(Input[0])!= len(Input[1]):

        return False

    else:

        return True



def check(candidate):

    assert candidate([[11, 22, 33], [44, 55, 66]]) == True

    assert candidate([[1, 2, 3], [4, 5, 6, 7]]) == False

    assert candidate([[1, 2], [3, 4]]) == True



def test_check():

    check(get_equal)



test_check()
</pre>

h2(#ppm-v-22). PPM&#45;V

* Prompt

<pre class="">
from typing import List

def get_equal(Input: List[List[int]]) -&gt; bool:
    &quot;&quot;&quot;
	Write a function to find whether all the given lists have equal length or not. For all bool values in the return results, invert True to False and False to True.
	&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def get_equal(Input: List[List[int]]) -&gt; bool:
    &quot;&quot;&quot;
	Write a function to find whether all the given lists have equal length or not. For all bool values in the return results, invert True to False and False to True.
	&quot;&quot;&quot;
    for i in range(len(Input)):
        if len(Input[i])!= len(Input[i+1]):
            return False
    return True
def check(candidate):
    assert candidate([[11, 22, 33], [44, 55, 66]]) == False
    assert candidate([[1, 2, 3], [4, 5, 6, 7]]) == True
    assert candidate([[1, 2], [3, 4]]) == False


def test_check():
    check(get_equal)


test_check()

</pre>

h1(#mbpp77). MBPP&#95;77

h2(#base-23). Base

* Prompt

bc(). def is_Diff(n: int) -> bool:
    """
        Write a python function to find whether a number is divisible by 11.
        """
    return n % 11 == 0


* Generation Code

<pre class="">
def is_Diff(n: int) -&gt; bool:
    &quot;&quot;&quot;
        Write a python function to find whether a number is divisible by 11.
        &quot;&quot;&quot;
    return n % 11 == 0


def check(candidate):
    assert candidate(12345) == False
    assert candidate(1212112) == True
    assert candidate(1212) == False

def test_check():
    check(is_Diff)

test_check()
</pre>

h2(#adddemo-23). Add&#95;Demo

* Prompt

bc(). def is_Diff(n: int) -> bool:
    """
        Write a python function to find whether a number is divisible by 11.
        >>> is_Diff(1212112)
        True
    """


* Generation Code

<pre class="">
def is_Diff(n: int) -&gt; bool:
    &quot;&quot;&quot;
        Write a python function to find whether a number is divisible by 11.
        &gt;&gt;&gt; is_Diff(1212112)
        True
    &quot;&quot;&quot;
    return n % 11 == 0


def check(candidate):
    assert candidate(12345) == False
    assert candidate(1212112) == True
    assert candidate(1212) == False

def test_check():
    check(is_Diff)

test_check()
</pre>



h2(#token-mutation-23). Token Mutation

* Prompt

bc(). def is_Diff(n: int) -> bool:
    """
        Write a number check to find whether a number is multiplied by 11.
        """


* Generation Code

<pre class="">
def is_Diff(n: int) -&gt; bool:
    &quot;&quot;&quot;
        Write a number check to find whether a number is multiplied by 11.
        &quot;&quot;&quot;
    return n % 11 == 0

def check(candidate):
    assert candidate(12345) == False
    assert candidate(1212112) == True
    assert candidate(1212) == False

def test_check():
    check(is_Diff)

test_check()
</pre>

h2(#char-mutation-23). Char Mutation

* Prompt

bc(). def is_Diff(n: int) -> bool:
    """
        Write a python unction to find whethr a number is divisible b 11.
        """


* Generation Code

<pre class="">
def is_Diff(n: int) -&gt; bool:
    &quot;&quot;&quot;
        Write a python unction to find whethr a number is divisible b 11.
        &quot;&quot;&quot;
    return n % 11 == 0

def check(candidate):
    assert candidate(12345) == False
    assert candidate(1212112) == True
    assert candidate(1212) == False

def test_check():
    check(is_Diff)

test_check()
</pre>

h2(#funcname-mutation-23). FuncName Mutation

* Prompt

bc(). def is_Dlff(n: int) -> bool:
    """
        Write a python function to find whether a number is divisible by 11.
        """


* Generation Code

<pre class="">
def is_Dlff(n: int) -&gt; bool:
    &quot;&quot;&quot;
        Write a python function to find whether a number is divisible by 11.
        &quot;&quot;&quot;
    return True if n % 11 == 0 else False


def check(candidate):
    assert candidate(12345) == False
    assert candidate(1212112) == True
    assert candidate(1212) == False

def test_check():
    check(is_Dlff)

test_check()
</pre>

h2(#insert-line-23). Insert Line

* Prompt

<pre class="">
def is_Diff(n: int) -&gt; bool:
    &quot;&quot;&quot;
    
        Write a python function to find whether a number is divisible by 11.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
def is_Diff(n: int) -&gt; bool:
    &quot;&quot;&quot;
    
        Write a python function to find whether a number is divisible by 11.
        &quot;&quot;&quot;

    return n % 11 == 0


def check(candidate):
    assert candidate(12345) == False
    assert candidate(1212112) == True
    assert candidate(1212) == False

def test_check():
    check(is_Diff)

test_check()
</pre>

h2(#commsyntax-23). CommSyntax

* Prompt

<pre class="">
def is_Diff(n: int) -&gt; bool:
    
    # Write a python function to find whether a number is divisible by 11.
</pre>

* Generation Code

<pre class="">
def is_Diff(n: int) -&gt; bool:

    

    # Write a python function to find whether a number is divisible by 11.

    

    # The condition to find whether a number is divisible by 11 is:

    #     (n % 11) == 0 or (n % 11 == 1 and n!= 11)

    

    # The logic is:

    #     Divisible by 11

    #     or

    #     Divisible by 11 and not 11

    

    # Check whether a number is divisible by 11.

    return (n % 11) == 0 or (n % 11 == 1 and n!= 11)



def check(candidate):

    assert candidate(12345) == False

    assert candidate(1212112) == True

    assert candidate(1212) == False



def test_check():

    check(is_Diff)



test_check()
</pre>

h2(#ppm-v-23). PPM&#45;V

* Prompt

bc(). def is_Diff(n: int) -> bool:
    """
	Write a python function to find whether a number is divisible by 11. For all bool values in the return results, invert True to False and False to True.
	"""


* Generation Code

<pre class="">
def is_Diff(n: int) -&gt; bool:
    &quot;&quot;&quot;
	Write a python function to find whether a number is divisible by 11. For all bool values in the return results, invert True to False and False to True.
	&quot;&quot;&quot;
    return not n % 11
def check(candidate):
    assert candidate(12345) == True
    assert candidate(1212112) == False
    assert candidate(1212) == True


def test_check():
    check(is_Diff)


test_check()

</pre>

h1(#mbpp88). MBPP&#95;88

h2(#base-24). Base

* Prompt

<pre class="">
from typing import List, Dict

def freq_count(list1: List[int]) -&gt; Dict[int, int]:
    &quot;&quot;&quot;
        Write a function to get the frequency of all the elements in a list, returned as a dictionary.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List, Dict

def freq_count(list1: List[int]) -&gt; Dict[int, int]:
    &quot;&quot;&quot;
        Write a function to get the frequency of all the elements in a list, returned as a dictionary.
        &quot;&quot;&quot;
    counts = {}
    for item in list1:
        counts[item] = counts.get(item, 0) + 1
    return counts


def check(candidate):
    assert candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == { 10: 4, 20: 4, 40: 2, 50: 2, 30: 1 }
    assert candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]) == { 1: 3, 2: 2, 3: 3, 4: 3 }
    assert candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]) == { 10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2 }

def test_check():
    check(freq_count)

test_check()
</pre>

h2(#adddemo-24). Add&#95;Demo

* Prompt

<pre class="">
from typing import List, Dict

def freq_count(list1: List[int]) -&gt; Dict[int, int]:
    &quot;&quot;&quot;
        Write a function to get the frequency of all the elements in a list, returned as a dictionary.
        &gt;&gt;&gt; freq_count([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4])
        { 1: 3, 2: 2, 3: 3, 4: 3 }
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List, Dict

def freq_count(list1: List[int]) -&gt; Dict[int, int]:
    &quot;&quot;&quot;
        Write a function to get the frequency of all the elements in a list, returned as a dictionary.
        &gt;&gt;&gt; freq_count([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4])
        { 1: 3, 2: 2, 3: 3, 4: 3 }
    &quot;&quot;&quot;
    freq_dict = {}
    for num in list1:
        if num in freq_dict:
            freq_dict[num] += 1
        else:
            freq_dict[num] = 1
    return freq_dict

def check(candidate):
    assert candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == { 10: 4, 20: 4, 40: 2, 50: 2, 30: 1 }
    assert candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]) == { 1: 3, 2: 2, 3: 3, 4: 3 }
    assert candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]) == { 10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2 }

def test_check():
    check(freq_count)

test_check()
</pre>



h2(#token-mutation-24). Token Mutation

* Prompt

<pre class="">
from typing import List, Dict

def freq_count(list1: List[int]) -&gt; Dict[int, int]:
    &quot;&quot;&quot;
        Write a string to get the names of all the items in a list, returned as a dictionary.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List, Dict

def freq_count(list1: List[int]) -&gt; Dict[int, int]:
    &quot;&quot;&quot;
        Write a string to get the names of all the items in a list, returned as a dictionary.
        &quot;&quot;&quot;
    freq_dict = {}
    for item in list1:
        if item in freq_dict:
            freq_dict[item] += 1
        else:
            freq_dict[item] = 1

    return freq_dict

def check(candidate):
    assert candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == { 10: 4, 20: 4, 40: 2, 50: 2, 30: 1 }
    assert candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]) == { 1: 3, 2: 2, 3: 3, 4: 3 }
    assert candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]) == { 10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2 }

def test_check():
    check(freq_count)

test_check()
</pre>

h2(#char-mutation-24). Char Mutation

* Prompt

<pre class="">
from typing import List, Dict

def freq_count(list1: List[int]) -&gt; Dict[int, int]:
    &quot;&quot;&quot;
        Write a function to ge the frequency of all tYhe elements іn a list, returned as a dictionary.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List, Dict

def freq_count(list1: List[int]) -&gt; Dict[int, int]:
    &quot;&quot;&quot;
        Write a function to ge the frequency of all tYhe elements іn a list, returned as a dictionary.
        &quot;&quot;&quot;
    freq_dict = {}
    for i in list1:
        if i not in freq_dict:
            freq_dict[i] = 1
        else:
            freq_dict[i] += 1
    return freq_dict

def check(candidate):
    assert candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == { 10: 4, 20: 4, 40: 2, 50: 2, 30: 1 }
    assert candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]) == { 1: 3, 2: 2, 3: 3, 4: 3 }
    assert candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]) == { 10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2 }

def test_check():
    check(freq_count)

test_check()
</pre>

h2(#funcname-mutation-24). FuncName Mutation

* Prompt

<pre class="">
from typing import List, Dict

def freq_count(list1: List[int]) -&gt; Dict[int, int]:
    &quot;&quot;&quot;
        Write a function to get the frequency of all the elements in a list, returned as a dictionary.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List, Dict

def freq_count(list1: List[int]) -&gt; Dict[int, int]:
    &quot;&quot;&quot;
        Write a function to get the frequency of all the elements in a list, returned as a dictionary.
        &quot;&quot;&quot;
    freq = {}
    for item in list1:
        if item in freq:
            freq[item] += 1
        else:
            freq[item] = 1
    return freq


def check(candidate):
    assert candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == { 10: 4, 20: 4, 40: 2, 50: 2, 30: 1 }
    assert candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]) == { 1: 3, 2: 2, 3: 3, 4: 3 }
    assert candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]) == { 10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2 }

def test_check():
    check(freq_count)

test_check()
</pre>

h2(#insert-line-24). Insert Line

* Prompt

<pre class="">
def freq_count(list1: List[int]) -&gt; Dict[int, int]:
    &quot;&quot;&quot;
    
        Write a function to get the frequency of all the elements in a list, returned as a dictionary.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
def freq_count(list1: List[int]) -&gt; Dict[int, int]:
    &quot;&quot;&quot;
    
        Write a function to get the frequency of all the elements in a list, returned as a dictionary.
        &quot;&quot;&quot;

    freq = {}

    for i in list1:
        if i in freq:
            freq[i] += 1
        else:
            freq[i] = 1

    return freq


def check(candidate):
    assert candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == { 10: 4, 20: 4, 40: 2, 50: 2, 30: 1 }
    assert candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]) == { 1: 3, 2: 2, 3: 3, 4: 3 }
    assert candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]) == { 10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2 }

def test_check():
    check(freq_count)

test_check()
</pre>

h2(#commsyntax-24). CommSyntax

* Prompt

<pre class="">
from typing import List, Dict

def freq_count(list1: List[int]) -&gt; Dict[int, int]:
    
    # Write a function to get the frequency of all the elements in a list, returned as a dictionary.
</pre>

* Generation Code

<pre class="">
from typing import List, Dict



def freq_count(list1: List[int]) -&gt; Dict[int, int]:

    

    # Write a function to get the frequency of all the elements in a list, returned as a dictionary.

    

    freq_dict = {}

    for i in list1:

        if i in freq_dict:

            freq_dict[i] += 1

        else:

            freq_dict[i] = 1

    return freq_dict



def check(candidate):

    assert candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == { 10: 4, 20: 4, 40: 2, 50: 2, 30: 1 }

    assert candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]) == { 1: 3, 2: 2, 3: 3, 4: 3 }

    assert candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]) == { 10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2 }



def test_check():

    check(freq_count)



test_check()
</pre>

h2(#ppm-v-24). PPM&#45;V

* Prompt

<pre class="">
from typing import List, Dict

def freq_count(list1: List[int]) -&gt; Dict[int, int]:
    &quot;&quot;&quot;
	Write a function to get the frequency of all the elements in a list, returned as a dictionary. For all int type values in the return results, increase each value by -10.
	&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List, Dict

def freq_count(list1: List[int]) -&gt; Dict[int, int]:
    &quot;&quot;&quot;
	Write a function to get the frequency of all the elements in a list, returned as a dictionary. For all int type values in the return results, increase each value by -10.
	&quot;&quot;&quot;
    d = {}
    for i in list1:
        if i in d:
            d[i] += 1
        else:
            d[i] = 1
    for k, v in d.items():
        d[k] = v * -10
    return d
def check(candidate):
    assert candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == {
        (10): -6, (20): -6, (40): -8, (50): -8, (30): -9}
    assert candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]) == {(1): -7, (2): -
        8, (3): -7, (4): -7}
    assert candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]) == {(10): -9, (
        5): -7, (6): -8, (7): -8, (4): -8, (9): -8}


def test_check():
    check(freq_count)


test_check()

</pre>

h1(#mbpp91). MBPP&#95;91

h2(#base-25). Base

* Prompt

<pre class="">
from typing import List

def find_substring(str1: List[str], sub_str: str) -&gt; bool:
    &quot;&quot;&quot;
	Write a function to check if a string is present as a substring in a given list of string values.
	&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def find_substring(str1: List[str], sub_str: str) -&gt; bool:
    &quot;&quot;&quot;
	Write a function to check if a string is present as a substring in a given list of string values.
	&quot;&quot;&quot;
    for i in range(len(str1) - len(sub_str) + 1):
        if sub_str == &quot;&quot;.join(str1[i:i+len(sub_str)]):
            return True

    return False

def check(candidate):
    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ack') == True
    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'abc') == False
    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ange') == True

def test_check():
    check(find_substring)

test_check()

</pre>

h2(#adddemo-25). Add&#95;Demo

* Prompt

<pre class="">
from typing import List

def find_substring(str1: List[str], sub_str: str) -&gt; bool:
    &quot;&quot;&quot;
	Write a function to check if a string is present as a substring in a given list of string values.
	&gt;&gt;&gt; find_substring(['red', 'black', 'white', 'green', 'orange'], 'ange')
	True&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def find_substring(str1: List[str], sub_str: str) -&gt; bool:
    &quot;&quot;&quot;
	Write a function to check if a string is present as a substring in a given list of string values.
	&gt;&gt;&gt; find_substring(['red', 'black', 'white', 'green', 'orange'], 'ange')
	True&quot;&quot;&quot;
    for i in range(len(str1)):
        if sub_str in str1[i]:
            return True
    return False
def check(candidate):
    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ack') == True
    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'abc') == False
    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ange') == True

def test_check():
    check(find_substring)

test_check()

</pre>



h2(#token-mutation-25). Token Mutation

* Prompt

<pre class="">
from typing import List

def find_substring(str1: List[str], sub_str: str) -&gt; bool:
    &quot;&quot;&quot;
	Write a string to check if a string is present as a set in a given value of string values.
	&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def find_substring(str1: List[str], sub_str: str) -&gt; bool:
    &quot;&quot;&quot;
	Write a string to check if a string is present as a set in a given value of string values.
	&quot;&quot;&quot;
    print(sub_str in str1)
    for i in range(len(str1)):
        if str1[i:].startswith(sub_str):
            return True
    return False

def check(candidate):
    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ack') == True
    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'abc') == False
    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ange') == True

def test_check():
    check(find_substring)

test_check()

</pre>

h2(#char-mutation-25). Char Mutation

* Prompt

<pre class="">
from typing import List

def find_substring(str1: List[str], sub_str: str) -&gt; bool:
    &quot;&quot;&quot;
	Write a fnuction to check if a string is present as a subtsring in a gien list of string values.
	&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def find_substring(str1: List[str], sub_str: str) -&gt; bool:
    &quot;&quot;&quot;
	Write a fnuction to check if a string is present as a subtsring in a gien list of string values.
	&quot;&quot;&quot;
    for i in range(len(str1)):
        if str1[i].startswith(sub_str):
            return True
    return False
def check(candidate):
    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ack') == True
    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'abc') == False
    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ange') == True

def test_check():
    check(find_substring)

test_check()

</pre>

h2(#funcname-mutation-25). FuncName Mutation

* Prompt

<pre class="">
from typing import List

def find_susbtring(str1: List[str], sub_str: str) -&gt; bool:
    &quot;&quot;&quot;
	Write
</pre>

* Generation Code

<pre class="">
from typing import List

def find_susbtring(str1: List[str], sub_str: str) -&gt; bool:
    &quot;&quot;&quot;
	Write a function to check if a string is present as a substring in a given list of string values.
	&quot;&quot;&quot;
    # for each string in the list, see if the substring is in the string
    for i in str1:
        if sub_str in i:
            return True
    return False

def check(candidate):
    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ack') == True
    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'abc') == False
    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ange') == True

def test_check():
    check(find_substring)

test_check()

</pre>

h2(#insert-line-25). Insert Line

* Prompt

<pre class="">
from typing import List

def find_substring(str1: List[str], sub_str: str) -&gt; bool:
    &quot;&quot;&quot;
    
	Write a function to check if a string is present as a substring in a given list of string values.
	&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def find_substring(str1: List[str], sub_str: str) -&gt; bool:
    &quot;&quot;&quot;
    
	Write a function to check if a string is present as a substring in a given list of string values.
	&quot;&quot;&quot;

    return any(sub_str in s for s in str1)

def check(candidate):
    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ack') == True
    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'abc') == False
    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ange') == True

def test_check():
    check(find_substring)

test_check()

</pre>

h2(#commsyntax-25). CommSyntax

* Prompt

<pre class="">
from typing import List

def find_substring(str1: List[str], sub_str: str) -&gt; bool:
    
    # Write a function to check if a string is present as a substring in a given list of string values.
</pre>

* Generation Code

<pre class="">
from typing import List



def find_substring(str1: List[str], sub_str: str) -&gt; bool:

    

    # Write a function to check if a string is present as a substring in a given list of string values.

    

    # Implement the function below

    

    count = 0

    for i in range(len(str1)):

        if sub_str in str1[i]:

            count += 1

    if count == 1:

        return True

    else:

        return False

    def check(candidate):

    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ack') == True

    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'abc') == False

    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ange') == True



def test_check():

    check(find_substring)



test_check()


</pre>

h2(#ppm-v-25). PPM&#45;V

* Prompt

<pre class="">
from typing import List

def find_substring(str1: List[str], sub_str: str) -&gt; bool:
    &quot;&quot;&quot;
	Write a function to check if a string is present as a substring in a given list of string values. For all bool values in the return results, invert True to False and False to True.
	&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def find_substring(str1: List[str], sub_str: str) -&gt; bool:
    &quot;&quot;&quot;
	Write a function to check if a string is present as a substring in a given list of string values. For all bool values in the return results, invert True to False and False to True.
	&quot;&quot;&quot;
    for word in str1:
        if sub_str in word:
            return True
    return False

def check(candidate):
    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ack'
        ) == False
    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'abc'
        ) == True
    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ange'
        ) == False


def test_check():
    check(find_substring)


test_check()

</pre>

h1(#mbpp96). MBPP&#95;96

h2(#base-26). Base

* Prompt

bc(). def divisor(n: int) -> int:
    """
        Write a python function to find the number of divisors of a given integer.
        """


* Generation Code

<pre class="">
def divisor(n: int) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find the number of divisors of a given integer.
        &quot;&quot;&quot;
    count = 0
    i = 1
    while i &lt;= n:
        if n % i == 0:
            count += 1
        i += 1
    return count

def check(candidate):
    assert candidate(15) == 4
    assert candidate(12) == 6
    assert candidate(9) == 3

def test_check():
    check(divisor)

test_check()
</pre>

h2(#adddemo-26). Add&#95;Demo

* Prompt

bc(). def divisor(n: int) -> int:
    """
        Write a python function to find the number of divisors of a given integer.
        >>> divisor(9)
        3"""


* Generation Code

<pre class="">
def divisor(n: int) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find the number of divisors of a given integer.
        &gt;&gt;&gt; divisor(9)
        3&quot;&quot;&quot;
    num_divisors = 0
    for i in range(1, n+1):
        if n % i == 0:
            num_divisors += 1
    return num_divisors


def check(candidate):
    assert candidate(15) == 4
    assert candidate(12) == 6
    assert candidate(9) == 3

def test_check():
    check(divisor)

test_check()
</pre>



h2(#token-mutation-26). Token Mutation

* Prompt

bc(). def divisor(n: int) -> int:
    """
        Write a number function to find the hash of values of a given integer.
        """


* Generation Code

<pre class="">
def divisor(n: int) -&gt; int:
    &quot;&quot;&quot;
        Write a number function to find the hash of values of a given integer.
        &quot;&quot;&quot;
    result = 0
    for i in range(1,n+1):
        if n%i == 0:
            result += 1
    return result

def check(candidate):
    assert candidate(15) == 4
    assert candidate(12) == 6
    assert candidate(9) == 3

def test_check():
    check(divisor)

test_check()
</pre>

h2(#char-mutation-26). Char Mutation

* Prompt

bc(). def divisor(n: int) -> int:
    """
        Write a python function to fid the number Dof divisors of a givXen integer.
        """


* Generation Code

<pre class="">
def divisor(n: int) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to fid the number Dof divisors of a givXen integer.
        &quot;&quot;&quot;
    factors = []
    for i in range(1, n + 1):
        if n % i == 0:
            factors.append(i)
    return len(factors)


def check(candidate):
    assert candidate(15) == 4
    assert candidate(12) == 6
    assert candidate(9) == 3

def test_check():
    check(divisor)

test_check()
</pre>

h2(#funcname-mutation-26). FuncName Mutation

* Prompt

bc(). def divlsor(n: int) -> int:
    """
        Write a python function to find the number of divlsors of a given integer.
        """


* Generation Code

<pre class="">
def divlsor(n: int) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find the number of divlsors of a given integer.
        &quot;&quot;&quot;
    count = 0
    i = 1
    while i &lt;= n:
        if n % i == 0:
            count += 1
        i += 1
    return count


def check(candidate):
    assert candidate(15) == 4
    assert candidate(12) == 6
    assert candidate(9) == 3

def test_check():
    check(divlsor)

test_check()
</pre>

h2(#insert-line-26). Insert Line

* Prompt

bc(). def divisor(n: int) -> int:
    """
        Write a python function to find the number of divisors of a given integer.
        """


* Generation Code

<pre class="">
def divisor(n: int) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find the number of divisors of a given integer.
        &quot;&quot;&quot;

    count = 0
    for i in range(1, n + 1):
        if n % i == 0:
            count += 1

    return count


def check(candidate):
    assert candidate(15) == 4
    assert candidate(12) == 6
    assert candidate(9) == 3

def test_check():
    check(divisor)

test_check()
</pre>

h2(#commsyntax-26). CommSyntax

* Prompt

<pre class="">
def divisor(n: int) -&gt; int:
    
    # Write a python function to find the number of divisors of a given integer.
</pre>

* Generation Code

<pre class="">
def divisor(n: int) -&gt; int:

    

    # Write a python function to find the number of divisors of a given integer.

    

    count = 1

    for i in range(1, n):

        if n % i == 0:

            count += 1

    return count



def check(candidate):

    assert candidate(15) == 4

    assert candidate(12) == 6

    assert candidate(9) == 3



def test_check():

    check(divisor)



test_check()
</pre>

h2(#ppm-v-26). PPM&#45;V

* Prompt

bc(). def divisor(n: int) -> int:
    """
	Write a python function to find the number of divisors of a given integer. For all int type values in the return results, increase each value by -10.
	"""


* Generation Code

<pre class="">
def divisor(n: int) -&gt; int:
    &quot;&quot;&quot;
	Write a python function to find the number of divisors of a given integer. For all int type values in the return results, increase each value by -10.
	&quot;&quot;&quot;
    count = 0
    i = 1
    while i &lt;= n:
        if n % i == 0:
            count = count + 1
            n = n / i
        else:
            i = i + 1
    count = count + 1
    count = count + (-10)
    return count

def check(candidate):
    assert candidate(15) == -6
    assert candidate(12) == -4
    assert candidate(9) == -7


def test_check():
    check(divisor)


test_check()

</pre>

h1(#mbpp104). MBPP&#95;104

h2(#base-27). Base

* Prompt

<pre class="">
from typing import List

def sort_sublists(input_list: List[List[str]]) -&gt; List[List[str]]:
    &quot;&quot;&quot;
	Write a function to sort each sublist of strings in a given list of lists.
	&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def sort_sublists(input_list: List[List[str]]) -&gt; List[List[str]]:
    &quot;&quot;&quot;
	Write a function to sort each sublist of strings in a given list of lists.
	&quot;&quot;&quot;
    return sorted(input_list, key=lambda x: sorted(x, key=lambda y: y))
def check(candidate):
    assert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
    assert candidate([[' red ', 'green'], ['blue ', ' black'], [' orange', 'brown']]) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
    assert candidate([['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze']]) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]

def test_check():
    check(sort_sublists)

test_check()

</pre>

h2(#adddemo-27). Add&#95;Demo

* Prompt

<pre class="">
from typing import List

def sort_sublists(input_list: List[List[str]]) -&gt; List[List[str]]:
    &quot;&quot;&quot;
	Write a function to sort each sublist of strings in a given list of lists.
	&gt;&gt;&gt; sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])
	[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def sort_sublists(input_list: List[List[str]]) -&gt; List[List[str]]:
    &quot;&quot;&quot;
	Write a function to sort each sublist of strings in a given list of lists.
	&gt;&gt;&gt; sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])
	[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
    &quot;&quot;&quot;
    output = []
    for i in input_list:
        output.append(sorted(i))
    return output
def check(candidate):
    assert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
    assert candidate([[' red ', 'green'], ['blue ', ' black'], [' orange', 'brown']]) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
    assert candidate([['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze']]) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]

def test_check():
    check(sort_sublists)

test_check()

</pre>



h2(#token-mutation-27). Token Mutation

* Prompt

<pre class="">
from typing import List

def sort_sublists(input_list: List[List[str]]) -&gt; List[List[str]]:
    &quot;&quot;&quot;
	Write a function to sort each set of pair in a given lists of lists.
	&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def sort_sublists(input_list: List[List[str]]) -&gt; List[List[str]]:
    &quot;&quot;&quot;
	Write a function to sort each set of pair in a given lists of lists.
	&quot;&quot;&quot;
    output_list = []
    for i in range(len(input_list)):
        for j in range(len(input_list)):
            if len(input_list[i]) &lt; len(input_list[j]):
                input_list[i], input_list[j] = input_list[j], input_list[i]
    for i in range(len(input_list)):
        output_list.append(input_list[i])
    return output_list
def check(candidate):
    assert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
    assert candidate([[' red ', 'green'], ['blue ', ' black'], [' orange', 'brown']]) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
    assert candidate([['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze']]) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]

def test_check():
    check(sort_sublists)

test_check()

</pre>

h2(#char-mutation-27). Char Mutation

* Prompt

<pre class="">
from typing import List

def sort_sublists(input_list: List[List[str]]) -&gt; List[List[str]]:
    &quot;&quot;&quot;
	Write a functіon to sort eɑch sublist of strings in a given list o lists.
	&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def sort_sublists(input_list: List[List[str]]) -&gt; List[List[str]]:
    &quot;&quot;&quot;
	Write a functіon to sort eɑch sublist of strings in a given list o lists.
	&quot;&quot;&quot;
    if len(input_list) == 1:
        return input_list
    else:
        mid = len(input_list) // 2
        left_list = input_list[:mid]
        right_list = input_list[mid:]
        left_sorted_list = sort_sublists(left_list)
        right_sorted_list = sort_sublists(right_list)
        return merge_lists(left_sorted_list, right_sorted_list)
def check(candidate):
    assert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
    assert candidate([[' red ', 'green'], ['blue ', ' black'], [' orange', 'brown']]) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
    assert candidate([['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze']]) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]

def test_check():
    check(sort_sublists)

test_check()

</pre>

h2(#funcname-mutation-27). FuncName Mutation

* Prompt

<pre class="">
from typing import List

def sorh_sublists(input_list: List[List[str]]) -&gt; List[List[str]]:
    &quot;&quot;&quot;
	Write a function to sort each sublist of strings in a given list of lists.
	&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def sorh_sublists(input_list: List[List[str]]) -&gt; List[List[str]]:
    &quot;&quot;&quot;
	Write a function to sort each sublist of strings in a given list of lists.
	&quot;&quot;&quot;
    sublists = input_list

    for i in range(len(sublists)):
        sublists[i].sort()

    return sublists

def check(candidate):
    assert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
    assert candidate([[' red ', 'green'], ['blue ', ' black'], [' orange', 'brown']]) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
    assert candidate([['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze']]) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]

def test_check():
    check(sorh_sublists)

test_check()

</pre>

h2(#insert-line-27). Insert Line

* Prompt

<pre class="">
from typing import List


def sort_sublists(input_list: List[List[str]]) -&gt; List[List[str]]:
    &quot;&quot;&quot;
	Write a function to sort each sublist of strings in a given list of lists.
	&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List


def sort_sublists(input_list: List[List[str]]) -&gt; List[List[str]]:
    &quot;&quot;&quot;
	Write a function to sort each sublist of strings in a given list of lists.
	&quot;&quot;&quot;
    for i in range(len(input_list)):
        input_list[i].sort()
    return input_list

def check(candidate):
    assert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
    assert candidate([[' red ', 'green'], ['blue ', ' black'], [' orange', 'brown']]) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
    assert candidate([['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze']]) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]

def test_check():
    check(sort_sublists)

test_check()

</pre>

h2(#commsyntax-27). CommSyntax

* Prompt

<pre class="">
from typing import List

def sort_sublists(input_list: List[List[str]]) -&gt; List[List[str]]:
    
    # Write a function to sort each sublist of strings in a given list of lists.
</pre>

* Generation Code

<pre class="">
from typing import List



def sort_sublists(input_list: List[List[str]]) -&gt; List[List[str]]:

    

    # Write a function to sort each sublist of strings in a given list of lists.

    

    for i in range(len(input_list)):

        input_list[i].sort()

    

    return input_list

def check(candidate):

    assert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]

    assert candidate([[' red ', 'green'], ['blue ', ' black'], [' orange', 'brown']]) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]

    assert candidate([['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze']]) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]



def test_check():

    check(sort_sublists)



test_check()


</pre>

h2(#ppm-v-27). PPM&#45;V

* Prompt

<pre class="">
from typing import List

def sort_sublists(input_list: List[List[str]]) -&gt; List[List[str]]:
    &quot;&quot;&quot;
	Write a function to sort each sublist of strings in a given list of lists. For all str values in the return results, map each character in the str value to the character whose ASCII number is the current ASCII value plus 1.
	&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def sort_sublists(input_list: List[List[str]]) -&gt; List[List[str]]:
    &quot;&quot;&quot;
	Write a function to sort each sublist of strings in a given list of lists. For all str values in the return results, map each character in the str value to the character whose ASCII number is the current ASCII value plus 1.
	&quot;&quot;&quot;
    return [[list(map(lambda char: str(ord(char) + 1), word)) for word in sublist] for sublist in input_list]

def check(candidate):
    assert candidate([['green', 'orange'], ['black', 'white'], ['white',
        'black', 'orange']]) == [[['green', 'orange'], ['black', 'white'],
        ['black', 'orange', 'white']]]
    assert candidate([[' red ', 'green'], ['blue ', ' black'], [' orange',
        'brown']]) == [[[' red ', 'green'], [' black', 'blue '], [' orange',
        'brown']]]
    assert candidate([['zilver', 'gold'], ['magnesium', 'aluminium'], [
        'steel', 'bronze']]) == [[['gold', 'zilver'], ['aluminium',
        'magnesium'], ['bronze', 'steel']]]


def test_check():
    check(sort_sublists)


test_check()

</pre>

h1(#mbpp116). MBPP&#95;116

h2(#base-28). Base

* Prompt

<pre class="">
from typing import Tuple

def tuple_to_int(nums: Tuple[int, int, int]) -&gt; int:
    &quot;&quot;&quot;
        Write a function to convert a given tuple of positive integers into a single integer.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import Tuple

def tuple_to_int(nums: Tuple[int, int, int]) -&gt; int:
    &quot;&quot;&quot;
        Write a function to convert a given tuple of positive integers into a single integer.
        &quot;&quot;&quot;
    return int(str(nums[0]) + str(nums[1]) + str(nums[2]))

def check(candidate):
    assert candidate((1, 2, 3)) == 123
    assert candidate((4, 5, 6)) == 456
    assert candidate((5, 6, 7)) == 567

def test_check():
    check(tuple_to_int)

test_check()
</pre>

h2(#adddemo-28). Add&#95;Demo

* Prompt

<pre class="">
from typing import Tuple

def tuple_to_int(nums: Tuple[int, int, int]) -&gt; int:
    &quot;&quot;&quot;
        Write a function to convert a given tuple of positive integers into a single integer.
        &gt;&gt;&gt; tuple_to_int((4, 5, 6))
        456
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import Tuple

def tuple_to_int(nums: Tuple[int, int, int]) -&gt; int:
    &quot;&quot;&quot;
        Write a function to convert a given tuple of positive integers into a single integer.
        &gt;&gt;&gt; tuple_to_int((4, 5, 6))
        456
    &quot;&quot;&quot;
    return nums[0] * 100 + nums[1] * 10 + nums[2]

def check(candidate):
    assert candidate((1, 2, 3)) == 123
    assert candidate((4, 5, 6)) == 456
    assert candidate((5, 6, 7)) == 567

def test_check():
    check(tuple_to_int)

test_check()
</pre>



h2(#token-mutation-28). Token Mutation

* Prompt

<pre class="">
from typing import Tuple

def tuple_to_int(nums: Tuple[int, int, int]) -&gt; int:
    &quot;&quot;&quot;
        Write a two to convert a given set of function integers into a single integer.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import Tuple

def tuple_to_int(nums: Tuple[int, int, int]) -&gt; int:
    &quot;&quot;&quot;
        Write a two to convert a given set of function integers into a single integer.
        &quot;&quot;&quot;
    return nums[0] * 100 + nums[1] * 10 + nums[2]

def check(candidate):
    assert candidate((1, 2, 3)) == 123
    assert candidate((4, 5, 6)) == 456
    assert candidate((5, 6, 7)) == 567

def test_check():
    check(tuple_to_int)

test_check()
</pre>

h2(#char-mutation-28). Char Mutation

* Prompt

bc(). def tuple_to_int(nums: Tuple[int, int, int]) -> int:
    """
        Write ɑ function ot convert a given tuple f positive integers into a single integer.
        """


* Generation Code

<pre class="">
def tuple_to_int(nums: Tuple[int, int, int]) -&gt; int:
    &quot;&quot;&quot;
        Write ɑ function ot convert a given tuple f positive integers into a single integer.
        &quot;&quot;&quot;
    res = 0
    for i in nums:
        res = res * 10 + i
    return res


def check(candidate):
    assert candidate((1, 2, 3)) == 123
    assert candidate((4, 5, 6)) == 456
    assert candidate((5, 6, 7)) == 567

def test_check():
    check(tuple_to_int)

test_check()
</pre>

h2(#funcname-mutation-28). FuncName Mutation

* Prompt

<pre class="">
from typing import Tuple

def tuppe_to_int(nums: Tuple[int, int, int]) -&gt; int:
    &quot;&quot;&quot;
        Write a function to convert a given tuple of positive integers into a single integer.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import Tuple

def tuppe_to_int(nums: Tuple[int, int, int]) -&gt; int:
    &quot;&quot;&quot;
        Write a function to convert a given tuple of positive integers into a single integer.
        &quot;&quot;&quot;
    return int(str(nums[0]) + str(nums[1]) + str(nums[2]))


def check(candidate):
    assert candidate((1, 2, 3)) == 123
    assert candidate((4, 5, 6)) == 456
    assert candidate((5, 6, 7)) == 567

def test_check():
    check(tuppe_to_int)

test_check()
</pre>

h2(#insert-line-28). Insert Line

* Prompt

<pre class="">
from typing import Tuple

def tuple_to_int(nums: Tuple[int, int, int]) -&gt; int:
    &quot;&quot;&quot;
        Write a function to convert a given tuple of positive integers into a single integer.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import Tuple

def tuple_to_int(nums: Tuple[int, int, int]) -&gt; int:
    &quot;&quot;&quot;
        Write a function to convert a given tuple of positive integers into a single integer.
        &quot;&quot;&quot;

    return int(&quot;&quot;.join(map(str, nums)))


def check(candidate):
    assert candidate((1, 2, 3)) == 123
    assert candidate((4, 5, 6)) == 456
    assert candidate((5, 6, 7)) == 567

def test_check():
    check(tuple_to_int)

test_check()
</pre>

h2(#commsyntax-28). CommSyntax

* Prompt

<pre class="">
from typing import Tuple

def tuple_to_int(nums: Tuple[int, int, int]) -&gt; int:
    
    # Write a function to convert a given tuple of positive integers into a single integer.
</pre>

* Generation Code

<pre class="">
from typing import Tuple



def tuple_to_int(nums: Tuple[int, int, int]) -&gt; int:

    

    # Write a function to convert a given tuple of positive integers into a single integer.

    

    # For example: (1, 2, 3) becomes 6, and (1, 1, 1, 1) becomes 4.

    

    

    return int(.join([str(n) for n in nums]))



def check(candidate):

    assert candidate((1, 2, 3)) == 123

    assert candidate((4, 5, 6)) == 456

    assert candidate((5, 6, 7)) == 567



def test_check():

    check(tuple_to_int)



test_check()
</pre>

h2(#ppm-v-28). PPM&#45;V

* Prompt

<pre class="">
from typing import Tuple

def tuple_to_int(nums: Tuple[int, int, int]) -&gt; int:
    &quot;&quot;&quot;
	Write a function to convert a given tuple of positive integers into a single integer. For all int type values in the return results, increase each value by 7.
	&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import Tuple

def tuple_to_int(nums: Tuple[int, int, int]) -&gt; int:
    &quot;&quot;&quot;
	Write a function to convert a given tuple of positive integers into a single integer. For all int type values in the return results, increase each value by 7.
	&quot;&quot;&quot;
    return sum(n * 7 for n in nums)

def check(candidate):
    assert candidate((1, 2, 3)) == 130
    assert candidate((4, 5, 6)) == 463
    assert candidate((5, 6, 7)) == 574


def test_check():
    check(tuple_to_int)


test_check()

</pre>

h1(#mbpp119). MBPP&#95;119

h2(#base-29). Base

* Prompt

<pre class="">
from typing import List

def search(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find the element that appears only once in a sorted array.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def search(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find the element that appears only once in a sorted array.
        &quot;&quot;&quot;
    # Note:
    # Try to use a pre-defined dictionary
    # Try to use binary search algorithm
    # Try to use a hash table
    # Try to use a dictionary
    # Try to use a two-pointer approach
    # Use a dictionary to store the elements with their indexes
    # Use a dictionary to store the elements with their indexes

    # Use a dictionary to store the elements with their indexes
    index_dict = {}
    # Use a dictionary to store the elements with their indexes
    result_dict = {}

    # Note:
    # Use a dictionary to store the elements with their indexes
    for i, val in enumerate(arr):
        if val not in result_dict:
            result_dict[val] = i
        else:
            index_dict[val] = i
    
    # print(index_dict)
    # print(result_dict)

    for val in result_dict:
        if val not in index_dict:
            return val
    
    return -1

def check(candidate):
    assert candidate([1, 1, 2, 2, 3]) == 3
    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8
    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1

def test_check():
    check(search)

test_check()
</pre>

h2(#adddemo-29). Add&#95;Demo

* Prompt

<pre class="">
from typing import List

def search(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find the element that appears only once in a sorted array.
        &gt;&gt;&gt; search([1, 1, 2, 2, 3])
        3
    &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def search(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find the element that appears only once in a sorted array.
        &gt;&gt;&gt; search([1, 1, 2, 2, 3])
        3
    &quot;&quot;&quot;
    if len(arr) == 0:
        return None
    if len(arr) == 1:
        return arr[0]
    if len(arr) == 2:
        if arr[0]!= arr[1]:
            return arr[0]
        else:
            return arr[1]
    if arr[0]!= arr[1]:
        return arr[0]
    if arr[-1]!= arr[-2]:
        return arr[-1]
    for i in range(1, len(arr)-1):
        if arr[i]!= arr[i-1] and arr[i]!= arr[i+1]:
            return arr[i]


def check(candidate):
    assert candidate([1, 1, 2, 2, 3]) == 3
    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8
    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1

def test_check():
    check(search)

test_check()
</pre>



h2(#token-mutation-29). Token Mutation

* Prompt

<pre class="">
from typing import List

def search(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a search function to find the list that appears only once in a given array.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def search(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a search function to find the list that appears only once in a given array.
        &quot;&quot;&quot;
    for i in range(len(arr)):
        if arr.count(arr[i]) == 1:
            return arr[i]
    return -1

def check(candidate):
    assert candidate([1, 1, 2, 2, 3]) == 3
    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8
    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1

def test_check():
    check(search)

test_check()
</pre>

h2(#char-mutation-29). Char Mutation

* Prompt

<pre class="">
from typing import List

def search(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find tche element thta appears only once іn a sorted array.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def search(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find tche element thta appears only once іn a sorted array.
        &quot;&quot;&quot;
    # result = -1
    # for i in range(len(arr)):
    #     if arr.count(arr[i]) == 1:
    #         result = arr[i]
    # return result
    
    # без індексування
    for i in range(len(arr)):
        if arr.count(arr[i]) == 1:
            return arr[i]


def check(candidate):
    assert candidate([1, 1, 2, 2, 3]) == 3
    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8
    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1

def test_check():
    check(search)

test_check()
</pre>

h2(#funcname-mutation-29). FuncName Mutation

* Prompt

<pre class="">
from typing import List

def seagch(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find the element that appears only once in a sorted array.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def seagch(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find the element that appears only once in a sorted array.
        &quot;&quot;&quot;
    if len(arr) == 0 or len(arr) == 1:
        return arr[0]
    if arr[0]!= arr[1]:
        return arr[0]
    if arr[-1]!= arr[-2]:
        return arr[-1]
    if arr[0]!= arr[-1]:
        return arr[0]
    return arr[1]


def check(candidate):
    assert candidate([1, 1, 2, 2, 3]) == 3
    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8
    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1

def test_check():
    check(seagch)

test_check()
</pre>

h2(#insert-line-29). Insert Line

* Prompt

<pre class="">
from typing import List

def search(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find the element that appears only once in a sorted array.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def search(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
        Write a python function to find the element that appears only once in a sorted array.
        &quot;&quot;&quot;

    if len(arr) == 1:
        return arr[0]

    if arr[0] == arr[1]:
        return search(arr[2:])

    if arr[-1] == arr[-2]:
        return search(arr[:-2])

    if arr[-1] &gt; arr[0]:
        return search(arr[1:-1])
    else:
        return arr[0]

def check(candidate):
    assert candidate([1, 1, 2, 2, 3]) == 3
    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8
    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1

def test_check():
    check(search)

test_check()
</pre>

h2(#commsyntax-29). CommSyntax

* Prompt

<pre class="">
from typing import List

def search(arr: List[int]) -&gt; int:
    
    # Write a python function to find the element that appears only once in a sorted array.
</pre>

* Generation Code

<pre class="">
from typing import List



def search(arr: List[int]) -&gt; int:

    

    # Write a python function to find the element that appears only once in a sorted array.

    

    # if the arr is sorted, then the element that appears only once will be in the middle of the array

    # if the arr is not sorted, then the element that appears only once will be somewhere in the middle of the array

    # Time Complexity O(N)

    # Space Complexity O(1)

    

    # use a count variable to keep track of how many times an element appears in the array

    

    # if the count of an element is 1, then it must be the unique element

    # if the count of an element is greater than 1, then there is a non unique element

    

    count = {}

    

    for i in range(len(arr)):

        if arr[i] in count:

            count[arr[i]] += 1

        else:

            count[arr[i]] = 1

    

    for i in range(len(arr)):

        if count[arr[i]] == 1:

            return arr[i]

    

    return -1





def check(candidate):

    assert candidate([1, 1, 2, 2, 3]) == 3

    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8

    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1



def test_check():

    check(search)



test_check()
</pre>

h2(#ppm-v-29). PPM&#45;V

* Prompt

<pre class="">
from typing import List

def search(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
	Write a python function to find the element that appears only once in a sorted array. For all int type values in the return results, increase each value by -3.
	&quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
from typing import List

def search(arr: List[int]) -&gt; int:
    &quot;&quot;&quot;
	Write a python function to find the element that appears only once in a sorted array. For all int type values in the return results, increase each value by -3.
	&quot;&quot;&quot;
    for i in range(len(arr)):
        if arr[i] % 2!= 0:
            return arr[i] - 3
        
    return -1

def check(candidate):
    assert candidate([1, 1, 2, 2, 3]) == 0
    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 5
    assert candidate([1, 2, 2, 3, 3, 4, 4]) == -2


def test_check():
    check(search)


test_check()

</pre>

h1(#mbpp138). MBPP&#95;138

h2(#base-30). Base

* Prompt

bc(). def is_Sum_Of_Powers_Of_Two(n: int) -> bool:
    """
        Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
        """


* Generation Code

<pre class="">
def is_Sum_Of_Powers_Of_Two(n: int) -&gt; bool:
    &quot;&quot;&quot;
        Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
        &quot;&quot;&quot;
    return n &gt; 0 and n % 2 == 0 and n!= 2 and n!= 1


def check(candidate):
    assert candidate(10) == True
    assert candidate(7) == False
    assert candidate(14) == True

def test_check():
    check(is_Sum_Of_Powers_Of_Two)

test_check()
</pre>

h2(#adddemo-30). Add&#95;Demo

* Prompt

bc(). def is_Sum_Of_Powers_Of_Two(n: int) -> bool:
    """
        Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
        >>> is_Sum_Of_Powers_Of_Two(7)
        False
    """


* Generation Code

<pre class="">
def is_Sum_Of_Powers_Of_Two(n: int) -&gt; bool:
    &quot;&quot;&quot;
        Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
        &gt;&gt;&gt; is_Sum_Of_Powers_Of_Two(7)
        False
    &quot;&quot;&quot;
    if not isinstance(n, int):
        raise TypeError(&quot;Input should be an integer&quot;)
    if n &lt; 0:
        raise ValueError(&quot;Input should be a positive integer&quot;)
    if n == 0:
        return False
    sum_of_powers = 0
    while n &gt; 0:
        n = n - 1
        sum_of_powers += 1
    return sum_of_powers % 2 == 0


def check(candidate):
    assert candidate(10) == True
    assert candidate(7) == False
    assert candidate(14) == True

def test_check():
    check(is_Sum_Of_Powers_Of_Two)

test_check()
</pre>



h2(#token-mutation-30). Token Mutation

* Prompt

bc(). def is_Sum_Of_Powers_Of_Two(n: int) -> bool:
    """
        Write a powers function to check whether the given hash can be represented as sum of non-zero function of 2 or not.
        """


* Generation Code

<pre class="">
def is_Sum_Of_Powers_Of_Two(n: int) -&gt; bool:
    &quot;&quot;&quot;
        Write a powers function to check whether the given hash can be represented as sum of non-zero function of 2 or not.
        &quot;&quot;&quot;
    if n == 0:
        return False
    i = 1
    while i &lt;= n:
        if n % i == 0:
            if i == 2:
                return True
            i += 1
        else:
            i += 1
    return False


def check(candidate):
    assert candidate(10) == True
    assert candidate(7) == False
    assert candidate(14) == True

def test_check():
    check(is_Sum_Of_Powers_Of_Two)

test_check()
</pre>

h2(#char-mutation-30). Char Mutation

* Prompt

bc(). def is_Sum_Of_Powers_Of_Two(n: int) -> bool:
    """
        Write ɑ python function to check ԝhether tհe given number can be represented as sum of non-zero powers of 2 or not.
        """


* Generation Code

<pre class="">
def is_Sum_Of_Powers_Of_Two(n: int) -&gt; bool:
    &quot;&quot;&quot;
        Write ɑ python function to check ԝhether tհe given number can be represented as sum of non-zero powers of 2 or not.
        &quot;&quot;&quot;
    def is_power_of_two(num):
        if num == 0:
            return False
        if num % 2 == 0:
            return True
        return is_power_of_two(num//2)

    if is_power_of_two(n) is False:
        return False
    return True

def check(candidate):
    assert candidate(10) == True
    assert candidate(7) == False
    assert candidate(14) == True

def test_check():
    check(is_Sum_Of_Powers_Of_Two)

test_check()
</pre>

h2(#funcname-mutation-30). FuncName Mutation

* Prompt

bc(). def is_Skm_Of_Powers_Of_Two(n: int) -> bool:
    """
        Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
        """


* Generation Code

<pre class="">
def is_Skm_Of_Powers_Of_Two(n: int) -&gt; bool:
    &quot;&quot;&quot;
        Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
        &quot;&quot;&quot;
    n = str(n)
    if int(n[0]) == 0:
        return False
    elif int(n[0]) == 1:
        return True
    if int(n[0]) == 0:
        return False
    elif int(n[0]) == 1:
        return True
    for i in range(1, len(n)):
        if int(n[i]) == 0:
            return False
        elif int(n[i]) == 1:
            return True
    return False


def check(candidate):
    assert candidate(10) == True
    assert candidate(7) == False
    assert candidate(14) == True

def test_check():
    check(is_Skm_Of_Powers_Of_Two)

test_check()
</pre>

h2(#insert-line-30). Insert Line

* Prompt

<pre class="">
def is_Sum_Of_Powers_Of_Two(n: int) -&gt; bool:

    &quot;&quot;&quot;
        Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
        &quot;&quot;&quot;
</pre>

* Generation Code

<pre class="">
def is_Sum_Of_Powers_Of_Two(n: int) -&gt; bool:

    &quot;&quot;&quot;
        Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
        &quot;&quot;&quot;

    return n == 0 or n == 1 or any(n % (2 ** i) == 0 for i in range(1, int(n ** 0.5) + 1))


def check(candidate):
    assert candidate(10) == True
    assert candidate(7) == False
    assert candidate(14) == True

def test_check():
    check(is_Sum_Of_Powers_Of_Two)

test_check()
</pre>

h2(#commsyntax-30). CommSyntax

* Prompt

<pre class="">
def is_Sum_Of_Powers_Of_Two(n: int) -&gt; bool:
    
    # Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
</pre>

* Generation Code

<pre class="">
def is_Sum_Of_Powers_Of_Two(n: int) -&gt; bool:

    

    # Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.

    

    # Return True if such a number can be represented as sum of non-zero powers of 2.

    # Else return False

    

    

    # Using bitwise operator

    if n == 0:

        return False

    

    # Setting n as power of 2

    n = n | (n - 1)

    

    # Initializing a variable to hold sum of powers of 2

    sum_of_powers = 0

    

    # Traversing through all bits of n

    while n:

        # if n is power of 2

        if n &amp; 1:

            # increment sum_of_powers

            sum_of_powers += 1

        # otherwise, n = n &gt;&gt; 1

        else:

            # increment sum_of_powers by 1

            sum_of_powers += 1

        

        # incrementing n

        n &gt;&gt;= 1

    

    # If sum of powers of 2 is odd, it means that n is not power of 2

    if sum_of_powers % 2!= 0:

        return False

    

    # If sum of powers of 2 is even, it means that n is power of 2

    return True





def check(candidate):

    assert candidate(10) == True

    assert candidate(7) == False

    assert candidate(14) == True



def test_check():

    check(is_Sum_Of_Powers_Of_Two)



test_check()
</pre>

h2(#ppm-v-30). PPM&#45;V

* Prompt

bc(). def is_Sum_Of_Powers_Of_Two(n: int) -> bool:
    """
	Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not. For all bool values in the return results, invert True to False and False to True.
	"""


* Generation Code

<pre class="">
def is_Sum_Of_Powers_Of_Two(n: int) -&gt; bool:
    &quot;&quot;&quot;
	Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not. For all bool values in the return results, invert True to False and False to True.
	&quot;&quot;&quot;
    if n == 0:
        return False
    if n == 1:
        return True
    if n == 2:
        return True
    if n == 3:
        return True
    sum = 0
    while n!= 0:
        sum += n % 2
        n = n // 2
    return True if sum == 0 else False

def check(candidate):
    assert candidate(10) == False
    assert candidate(7) == True
    assert candidate(14) == False


def test_check():
    check(is_Sum_Of_Powers_Of_Two)


test_check()

</pre>

